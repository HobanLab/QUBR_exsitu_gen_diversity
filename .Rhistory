Monitor2 == 'Viva' & is.na(Monitor3) ~ '20/01/2023',
Monitor1 == 'Viva' & is.na(Monitor2) ~ '13/02/2022',
Monitor2 == 'Nueva' & Monitor3 == 'Muerta' ~ DatePlanted,
Monitor2 == 'Nueva' & is.na(Monitor3) ~ DatePlanted,
Monitor2 == 'Viva' & Monitor3 == 'Muerta' ~ '20/01/2023'))%>%
add_column(Outcome = NA)%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
mutate(Outcome = case_when(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' ~ 'Dead',
Monitor3 == 'Nueva' | Monitor3 == 'Viva' ~ 'Alive',
Monitor2 == 'Nueva' & is.na(Monitor3) ~ 'Presumed Dead',
Monitor2 == 'Viva' & is.na(Monitor3) ~ 'Presumed Dead',
is.na(Monitor2) & is.na(Monitor3) ~ 'Presumed Dead',
is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) ~ 'Presumed Dead'
))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)%>% #days since it was first planted
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (Today - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
#removes rows for individuals handed out at Festival 2023
filter(!str_detect(Ranch, "Festival"))
#How many different lengths of time have individuals been alive for?
unique(seedlings_clean$PotentialTimeAlive)
#prioritize seedlings for visits while in Baja based on number of individuals at each ranch
priority_sites <- seedlings_clean%>%
filter(Outcome == 'Alive')%>%
group_by(PlantedReg, Ranch, N, W)%>%
summarise(n())
####SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
df_age <-
data.frame("Days"=seq(0, 1220, 1), "TotalAlive" = NA)
#for loop: how many individuals were still alive at any given duration?
#ALL
for (i in 1:nrow(df_age)) {
Day <- df_age$Days[i] #df_age$Days is a vector (one column in this df)
Num_seedlings_alive <- sum(Day <= seedlings_clean$TimeAlive, na.rm = TRUE)
#Day is a temporary object that holds the output of the day we are on in the iterative loop
df_age$TotalAlive[i] <- paste0(Num_seedlings_alive)
#fill one cell per iteration with the total number of seedlings alive by that day
}
#plot survivorship curve
df_age_final <- df_age%>%
mutate(TotalAlive = as.numeric(TotalAlive))%>%
mutate(PercentAlive = TotalAlive/max(TotalAlive, na.rm = TRUE))%>%
mutate(data_type = "all")
df_age_final %>%
ggplot(aes(x = Days, y = PercentAlive)) +
ggtitle("All") +
geom_step() +
theme_classic()
#representing y-axis as a ratio of days an individual lived / days it could have been alive for
#bc not all of the seedlings were planted on the same day, some have had the chance to grow longer than others
df_age_ratio <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(df_age_ratio)) {
Ratio_Value <- df_age_ratio$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean$RatioTimeAlive, na.rm = TRUE)
df_age_ratio$TotalValue[i] <- as.numeric(ratio_hold)
}
df_age_ratio %>%
ggplot() +
geom_step(aes(x = Ratio, y = TotalValue)) +
theme_classic()
#representing the same information, but broken up into groups by planting date
#filtering seedlings: individuals planted before M1
seedlings_clean_M1 <- seedlings_clean%>%
filter(DatePlanted < '2022-02-13')
M1_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M1_age)) {
Ratio_Value <- M1_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M1$RatioTimeAlive, na.rm = TRUE)
M1_age$TotalValue[i] <- as.numeric(ratio_hold)
}
M1_age %>%
ggplot() +
ggtitle("M1") +
geom_step(aes(x = Ratio, y = TotalValue)) +
ylim(0, 510) +
theme_classic()
####SET UP####
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
library(chisq.posthoc.test)
setwd("..")
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
setwd("..")
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
library(chisq.posthoc.test)
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity/R_scripts")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity/R_scripts")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
outplanted_seedlings24 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2024.csv")
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
outplanted_seedlings24 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2024.csv")
summary(outplanted_seedlings23)
summary(outplanted_seedlings24)
####DATA CLEANING####
#combines data from 2023 and 2024 tabs
seedlings_combined <- bind_rows(outplanted_seedlings23, outplanted_seedlings24)
summary(seedlings_combined)
#renames columns to simplified English, differentiates seed origin and seedling planted region
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
rename(Monitor4 = 'Monitoreo 1 (__/__/__)')%>%
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>%#reclass Perdida (poor) as Muerta (dead)
#calculate when a seedling died based on the last Monitoring date it was seen alive
add_column(DateDied = NA)%>%
mutate(DateDied = case_when(is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) ~ DatePlanted,
Monitor1 == 'Nueva' & is.na(Monitor2) ~ DatePlanted,
Monitor1 == 'Nueva' & Monitor2 == 'Muerta' ~ DatePlanted,
Monitor1 == 'Muerta' ~ DatePlanted,
Monitor1 == 'Viva' & Monitor2 == 'Muerta' ~'13/02/2022',
Monitor2 == 'Viva' & is.na(Monitor3) ~ '20/01/2023',
Monitor1 == 'Viva' & is.na(Monitor2) ~ '13/02/2022',
Monitor2 == 'Nueva' & Monitor3 == 'Muerta' ~ DatePlanted,
Monitor2 == 'Nueva' & is.na(Monitor3) ~ DatePlanted,
Monitor2 == 'Viva' & Monitor3 == 'Muerta' ~ '20/01/2023'))%>%
add_column(Outcome = NA)%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
mutate(Outcome = case_when(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' ~ 'Dead',
Monitor3 == 'Nueva' | Monitor3 == 'Viva' ~ 'Alive',
Monitor2 == 'Nueva' & is.na(Monitor3) ~ 'Presumed Dead',
Monitor2 == 'Viva' & is.na(Monitor3) ~ 'Presumed Dead',
is.na(Monitor2) & is.na(Monitor3) ~ 'Presumed Dead',
is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) ~ 'Presumed Dead'
))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)%>% #days since it was first planted
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (Today - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
#removes rows for individuals handed out at Festival 2023
filter(!str_detect(Ranch, "Festival"))
unique(seedlings_clean$PotentialTimeAlive)
#prioritize seedlings for visits while in Baja based on number of individuals at each ranch
priority_sites <- seedlings_clean%>%
filter(Outcome == 'Alive')%>%
group_by(PlantedReg, Ranch, N, W)%>%
summarise(n())
####SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
df_age <-
data.frame("Days"=seq(0, 1220, 1), "TotalAlive" = NA)
#for loop: how many individuals were still alive at any given duration?
#ALL
for (i in 1:nrow(df_age)) {
Day <- df_age$Days[i] #df_age$Days is a vector (one column in this df)
Num_seedlings_alive <- sum(Day <= seedlings_clean$TimeAlive, na.rm = TRUE)
#Day is a temporary object that holds the output of the day we are on in the iterative loop
df_age$TotalAlive[i] <- paste0(Num_seedlings_alive)
#fill one cell per iteration with the total number of seedlings alive by that day
}
#plot survivorship curve
df_age_final <- df_age%>%
mutate(TotalAlive = as.numeric(TotalAlive))%>%
mutate(PercentAlive = TotalAlive/max(TotalAlive, na.rm = TRUE))%>%
mutate(data_type = "all")
df_age_final %>%
ggplot(aes(x = Days, y = PercentAlive)) +
ggtitle("All") +
geom_step() +
theme_classic()
#representing y-axis as a ratio of days an individual lived / days it could have been alive for
#bc not all of the seedlings were planted on the same day, some have had the chance to grow longer than others
df_age_ratio <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(df_age_ratio)) {
Ratio_Value <- df_age_ratio$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean$RatioTimeAlive, na.rm = TRUE)
df_age_ratio$TotalValue[i] <- as.numeric(ratio_hold)
}
df_age_ratio %>%
ggplot() +
geom_step(aes(x = Ratio, y = TotalValue)) +
theme_classic()
#filtering seedlings: individuals planted before M1
seedlings_clean_M1 <- seedlings_clean%>%
filter(DatePlanted < '2022-02-13')
M1_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M1_age)) {
Ratio_Value <- M1_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M1$RatioTimeAlive, na.rm = TRUE)
M1_age$TotalValue[i] <- as.numeric(ratio_hold)
}
M1_age %>%
ggplot() +
ggtitle("M1") +
geom_step(aes(x = Ratio, y = TotalValue)) +
ylim(0, 510) +
theme_classic()
M1_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
View(M1_age)
#Repeat filtering seedlings: individuals planted between M1 & M2
seedlings_clean_M2 <- seedlings_clean%>%
filter(DatePlanted < '2023-01-20', DatePlanted > '2022-02-13')
M2_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M2_age)) {
Ratio_Value <- M2_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M2$RatioTimeAlive, na.rm = TRUE)
M2_age$TotalValue[i] <- as.numeric(ratio_hold)
}
M2_age %>%
ggplot() +
ggtitle("M2") +
geom_step(aes(x = Ratio, y = TotalValue)) +
ylim(0, 1159) +
theme_classic()
seedlings_clean_M3 <- seedlings_clean%>%
filter(DatePlanted < '2023-12-13', DatePlanted > '2023-01-20')
M3_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M3_age)) {
Ratio_Value <- M3_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M3$RatioTimeAlive, na.rm = TRUE)
M3_age$TotalValue[i] <- as.numeric(ratio_hold)
}
M3_age %>%
ggplot() +
ggtitle("M3") +
geom_step(aes(x = Ratio, y = TotalValue)) +
ylim(0, 40) +
theme_classic()
seedlings_clean_M3.1 <- seedlings_clean%>%
filter(DatePlanted > '2023-01-20')
M3.1_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M3.1_age)) {
Ratio_Value <- M3.1_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M3.1$RatioTimeAlive, na.rm = TRUE)
M3.1_age$TotalValue[i] <- as.numeric(ratio_hold)
}
M3.1_age %>%
ggplot() +
ggtitle("M3+") +
geom_step(aes(x = Ratio, y = TotalValue)) +
ylim(0, 40) +
theme_classic()
####CONVERTING FOR LOOP TO FUNCTION####
test_function <- function(sequence, fill_in){
paste(sequence, fill_in)
}
test_function("a", "b")
?function
?function
loop_function <- function(df, source, sequence, fill_in){
for (i in 1:nrow(df)) {
Ratio_Value <- df$sequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df$fill_in[i] <-as.numeric(ratio_hold)
}
}
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), TotalValue)
View(M2_age)
View(M3_age)
M1_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M1_age)) {
Ratio_Value <- M1_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M1$RatioTimeAlive, na.rm = TRUE)
M1_age$TotalValue[i] <- as.numeric(ratio_hold)
}
loop_function <- function(df, source, sequence, fill_in){
for (i in 1:nrow(df)) {
Ratio_Value <- df$sequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df$fill_in[i] <-as.numeric(ratio_hold)
}
}
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), TotalValue)
test_function("sequence", "fill_in")
#Example of a function that prints "a b"
test_function <- function(sequence, fill_in){
paste(sequence, fill_in)
}
test_function("sequence", "fill_in")
#Example of a function that prints "a b"
test_function <- function(sequence, fill_in){
paste(sequence, fill_in)
}
test_function("a", "b")
loop_function <- function(df, source, sequence, fill_in){
for (i in 1:nrow(df)) {
Ratio_Value <- df$sequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df$fill_in[i] <-as.numeric(ratio_hold)
}
}
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), TotalValue)
#Repeat filtering seedlings: individuals planted between M1 & M2
seedlings_clean_M2 <- seedlings_clean%>%
filter(DatePlanted < '2023-01-20', DatePlanted > '2022-02-13')
M2_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M2_age)) {
Ratio_Value <- M2_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M2$RatioTimeAlive, na.rm = TRUE)
M2_age$TotalValue[i] <- as.numeric(ratio_hold)
}
M2_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), TotalValue)
loop_function <- function(df, source, sequence, fill_in){
for (i in 1:nrow(df)) {
Ratio_Value <- df$sequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df$fill_in[i] <-as.numeric(ratio_hold)
}
}
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), TotalValue)
#Example of a function that prints "a b"
test_function <- function(sequence, fill_in){
paste(sequence, fill_in)
}
test_function("a", "b")
test_function("c", "d")
M2_age <-
data.frame("Ratio" =seq(0, 1, .01), "TotalValue" = NA)
for (i in 1:nrow(M2_age)) {
Ratio_Value <- M2_age$Ratio[i]
ratio_hold <- sum(Ratio_Value <= seedlings_clean_M2$RatioTimeAlive, na.rm = TRUE)
M2_age$TotalValue[i] <- as.numeric(ratio_hold)
}
temp <- paste(sequence, fill_in)
#Example of a function that prints "a b"
test_function <- function(sequence, fill_in){
temp <- paste(sequence, fill_in)
}
test_function("a", "b")
#Example of a function that prints "a b"
test_function <- function(sequence, fill_in){
temp <- paste(sequence, fill_in)
}
return(temp)
#Example of a function that prints "a b"
test_function <- function(sequence, fill_in){
temp <- paste(sequence, fill_in)
return(temp)
}
test_function("a", "b")
temp<-NA
#Example of a function that prints "a b"
test_function <- function(sequence, fill_in){
temp <- paste(sequence, fill_in)
#return(temp)
}
test_function("a", "b")
loop_function <- function(df, source, sequence, fill_in){
for (i in 1:nrow(df)) {
Ratio_Value <- df$sequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df$fill_in[i] <-as.numeric(ratio_hold)
}
return(df)
}
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), TotalValue)
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
names(M2_age)
#creates an empty example
loop_function <- function(source, CustomSequence, fill_in){
df <- data.frame("Ratio" = CustomSequence, fill_in = NA)
for (i in 1:nrow(df)) {
Ratio_Value <- df$CustomSequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df[i,2] <-as.numeric(ratio_hold)
}
return(df)
}
loop_function(M2_age, seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
#creates an empty example
loop_function <- function(source, CustomSequence, fill_in){
df <- data.frame("Ratio" = CustomSequence, fill_in = NA)
for (i in 1:nrow(df)) {
Ratio_Value <- df$CustomSequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df[i,2] <-as.numeric(ratio_hold)
}
return(df)
}
loop_function(seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
names(df)[2] <- c(fill_in)
#creates an empty example
loop_function <- function(source, CustomSequence, fill_in){
df <- data.frame("Ratio" = CustomSequence, fill_in = NA)
names(df)[2] <- c(fill_in)
for (i in 1:nrow(df)) {
Ratio_Value <- df$CustomSequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df[i,2] <-as.numeric(ratio_hold)
}
return(df)
}
#creates an empty example
loop_function <- function(source, CustomSequence, fill_in){
df <- data.frame("Ratio" = CustomSequence, fill_in = NA)
names(df)[2] <- c(fill_in)
for (i in 1:nrow(df)) {
Ratio_Value <- df$CustomSequence[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df[i,2] <-as.numeric(ratio_hold)
}
return(df)
}
loop_function(seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
source=seedlings_clean_M2
CustomSequence=seq(0, 1, .01)
fill_in="TotalValue"
i=1
df <- data.frame("Ratio" = CustomSequence, fill_in = NA)
View(df)
names(df)[2] <- c(fill_in)
Ratio_Value <- df$CustomSequence[i]
Ratio_Value <- df$CustomSequence[i]
Ratio_Value <- df$Ratio[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
ratio_hold
df[i,2] <-as.numeric(ratio_hold)
i=2
Ratio_Value <- df$Ratio[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df[i,2] <-as.numeric(ratio_hold)
#creates an empty example
loop_function <- function(source, CustomSequence, fill_in){
df <- data.frame("Ratio" = CustomSequence, fill_in = NA)
names(df)[2] <- c(fill_in)
for (i in 1:nrow(df)) {
Ratio_Value <- df$Ratio[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df[i,2] <-as.numeric(ratio_hold)
}
return(df)
}
loop_function(seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
M2_age<- loop_function(seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
temp<- loop_function(seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
View(temp)
M3_age <- loop_function(seedlings_clean_M3, seq(0, 1, .01), "TotalValue")
View(M3_age)
df[i,2] <-as.numeric(ratio_hold)
View(df)
loop_function <- function(source, CustomSequence, fill_in){
df <- data.frame("Ratio" = CustomSequence, fill_in = NA)
names(df)[2] <- c(fill_in) #overwrites the column title
for (i in 1:nrow(df)) {
Ratio_Value <- df$Ratio[i]
ratio_hold <- sum(Ratio_Value <= source$RatioTimeAlive, na.rm = TRUE)
df[i,2] <-as.numeric(ratio_hold)
}
return(df)
}
View(loop_function)
M2_age <- loop_function(seedlings_clean_M2, seq(0, 1, .01), "TotalValue")
M3.1_age <- loop_function(seedlings_clean_M3.1, seq(0, 1, .01), "TotalValue")
View(M3.1_age)
