temp <- input_for_df_age%>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
View(temp)
temp2 <- seedlings_clean%>%
select(DatePlanted, DateDied_conservative, DateDied_liberal, DateDied_med, TimeAlive_conservative, TimeAlive_liberal, TimeAlive_med)%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
View(seedlings_clean)
temp2 <- seedlings_clean%>%
select(c(DatePlanted, DateDied_conservative, DateDied_liberal, DateDied_med, TimeAlive_conservative, TimeAlive_liberal, TimeAlive_med))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
temp2 <- seedlings_clean%>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
temp2 <- seedlings_clean%>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
View(temp2)
View(outplanted_seedlings_nov24)
temp3 <- seedlings_clean_joined %>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
View(temp3)
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
dplyr::select(Ranch, MetalTagID, Monitor4)%>% #these are the only columns we need to carry over to add the fourth monitoring date and then update survivorship curves
left_join(seedlings_clean, ., by = 'MetalTagID')%>%
#Adding to previous Outcome in seedlings_clean
mutate(Outcome = case_when((Monitor4 == 'Nueva' | Monitor4 == 'Viva') ~ 'Alive',
(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied_conservative in seedlings_clean:
#DateDied_conservative is calculated based on last positive observation
mutate(DateDied_conservative = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ (DatePlanted),
((Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta') | is.na(Monitor2)) ~ (Monitor1Date+1),
((Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta') | is.na(Monitor3)) ~ (Monitor2Date+1),
((Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta') | is.na(Monitor4)) ~ (Monitor3Date+1)))%>%
#DateDied_liberal is the day before it is observed Dead
mutate(DateDied_liberal = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ Monitor1Date-1,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor2Date-1,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor3Date-1,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor4Date-1))%>%
#DateDied_med is the mid-point between Monitoring dates
mutate(DateDied_med = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ date(int_end(interval((DatePlanted), Monitor1Date)/2)),
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ date(int_end(interval(Monitor1Date, Monitor2Date)/2)),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ date(int_end(interval(Monitor2Date, Monitor3Date)/2)),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ date(int_end(interval(Monitor3Date, Monitor4Date)/2))))%>%
#If TimeAlive_conservative is negative because DatePlanted occurs after DateDied_conservative, use DatePlanted; otherwise default to DateDied_conservative
mutate(DateDied_conservative = case_when(DateDied_conservative <= DatePlanted ~ DatePlanted, .default = DateDied_conservative))%>%
mutate(DateDied_liberal = case_when(DateDied_liberal <= DatePlanted ~ DatePlanted, .default = DateDied_liberal))%>%
mutate(DateDied_med = case_when(DateDied_med <= DatePlanted ~ DatePlanted, .default = DateDied_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive_conservative is calculated based on outcome and time betweeen DatePlanted &  DateDied_conservative
mutate(TimeAlive_conservative = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied_conservative - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_conservative - DatePlanted)))%>%
#TimeAlive_liberal is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_liberal = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_liberal - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_liberal - DatePlanted)))%>%
#TimeAlive_med is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_med = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_med - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_med - DatePlanted)))%>%
mutate(RatioTimeAlive_conservative = (as.numeric(TimeAlive_conservative)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_liberal = (as.numeric(TimeAlive_liberal)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_med = (as.numeric(TimeAlive_med)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
temp3 <- seedlings_clean_joined %>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
temp3 <- seedlings_clean_joined %>%
#select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
dplyr::select(Ranch, MetalTagID, Monitor4)%>% #these are the only columns we need to carry over to add the fourth monitoring date and then update survivorship curves
left_join(seedlings_clean, ., by = 'MetalTagID')%>%
#Adding to previous Outcome in seedlings_clean
mutate(Outcome = case_when((Monitor4 == 'Nueva' | Monitor4 == 'Viva') ~ 'Alive',
(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied_conservative in seedlings_clean:
#DateDied_conservative is calculated based on last positive observation
mutate(DateDied_conservative = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ (DatePlanted),
((Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta') | is.na(Monitor2)) ~ (Monitor1Date+1),
((Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta') | is.na(Monitor3)) ~ (Monitor2Date+1),
((Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta') | is.na(Monitor4)) ~ (Monitor3Date+1),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#DateDied_liberal is the day before it is observed Dead
mutate(DateDied_liberal = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ Monitor1Date-1,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor2Date-1,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor3Date-1,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor4Date-1,
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#DateDied_med is the mid-point between Monitoring dates
mutate(DateDied_med = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ date(int_end(interval((DatePlanted), Monitor1Date)/2)),
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ date(int_end(interval(Monitor1Date, Monitor2Date)/2)),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ date(int_end(interval(Monitor2Date, Monitor3Date)/2)),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ date(int_end(interval(Monitor3Date, Monitor4Date)/2)),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#If TimeAlive_conservative is negative because DatePlanted occurs after DateDied_conservative, use DatePlanted; otherwise default to DateDied_conservative
mutate(DateDied_conservative = case_when(DateDied_conservative <= DatePlanted ~ DatePlanted, .default = DateDied_conservative))%>%
mutate(DateDied_liberal = case_when(DateDied_liberal <= DatePlanted ~ DatePlanted, .default = DateDied_liberal))%>%
mutate(DateDied_med = case_when(DateDied_med <= DatePlanted ~ DatePlanted, .default = DateDied_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive_conservative is calculated based on outcome and time betweeen DatePlanted &  DateDied_conservative
mutate(TimeAlive_conservative = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied_conservative - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_conservative - DatePlanted)))%>%
#TimeAlive_liberal is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_liberal = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_liberal - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_liberal - DatePlanted)))%>%
#TimeAlive_med is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_med = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_med - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_med - DatePlanted)))%>%
mutate(RatioTimeAlive_conservative = (as.numeric(TimeAlive_conservative)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_liberal = (as.numeric(TimeAlive_liberal)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_med = (as.numeric(TimeAlive_med)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
temp3 <- seedlings_clean_joined %>%
#select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
temp3 <- seedlings_clean_joined %>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
dplyr::select(Ranch, MetalTagID, Monitor4)%>% #these are the only columns we need to carry over to add the fourth monitoring date and then update survivorship curves
left_join(seedlings_clean, ., by = 'MetalTagID')%>%
#Adding to previous Outcome in seedlings_clean
mutate(Outcome = case_when((Monitor4 == 'Nueva' | Monitor4 == 'Viva') ~ 'Alive',
(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied_conservative in seedlings_clean:
#DateDied_conservative is calculated based on last positive observation
mutate(DateDied_conservative = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ (DatePlanted),
((Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta') | is.na(Monitor2)) ~ (Monitor1Date+1),
((Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta') | is.na(Monitor3)) ~ (Monitor2Date+1),
((Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta') | is.na(Monitor4)) ~ (Monitor3Date+1),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#DateDied_liberal is the day before it is observed Dead
mutate(DateDied_liberal = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ Monitor1Date-1,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor2Date-1,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor3Date-1,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor4Date-1,
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#DateDied_med is the mid-point between Monitoring dates
mutate(DateDied_med = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ date(int_end(interval((DatePlanted), Monitor1Date)/2)),
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ date(int_end(interval(Monitor1Date, Monitor2Date)/2)),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ date(int_end(interval(Monitor2Date, Monitor3Date)/2)),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ date(int_end(interval(Monitor3Date, Monitor4Date)/2)),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#If TimeAlive_conservative is negative because DatePlanted occurs after DateDied_conservative, use DatePlanted; otherwise default to DateDied_conservative
mutate(DateDied_conservative = case_when(DateDied_conservative <= DatePlanted ~ DatePlanted, .default = DateDied_conservative))%>%
mutate(DateDied_liberal = case_when(DateDied_liberal <= DatePlanted ~ DatePlanted, .default = DateDied_liberal))%>%
mutate(DateDied_med = case_when(DateDied_med <= DatePlanted ~ DatePlanted, .default = DateDied_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive_conservative is calculated based on outcome and time betweeen DatePlanted &  DateDied_conservative
mutate(TimeAlive_conservative = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied_conservative - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_conservative - DatePlanted)))%>%
#TimeAlive_liberal is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_liberal = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_liberal - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_liberal - DatePlanted)))%>%
#TimeAlive_med is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_med = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_med - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_med - DatePlanted)))%>%
mutate(RatioTimeAlive_conservative = (as.numeric(TimeAlive_conservative)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_liberal = (as.numeric(TimeAlive_liberal)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_med = (as.numeric(TimeAlive_med)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
temp3 <- seedlings_clean_joined %>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
#Takes data collected in the field in Nov 2024 and recodes some columns that have irregular (shade, height, etc)
outplanted_seedlings_nov24 <- outplanted_seedlings24.field%>%
#interprets dead individuals with a Height of N/A as a Height_cm of 0
mutate(Height_cm=recode(Height,'N/A' = '0'))%>%
#renames columns to match previous data
mutate(Ranch=recode(Ranch,
'San Dio' = 'Rancho San Dionisio',
'Santo Do' = 'Santo Domingo',
'La Palapa' = 'La Rueda (Palapa)',
'Parque de Santiago' = 'Parque Ecológico Santiago',
'Santa Gertrudis (orchard)' = 'Santa Gertudris (Huerta)',
'Santa Gertrudis' = 'Santa Gertudris',
'Palo Verdal' = 'Palo Verdad'))%>%
#combines equivalent variables
mutate(Monitor4=recode(Condition,
'the best' = 'Viva',
'great' = 'Viva',
'good' = 'Viva',
'fair' = 'Viva',
'poor' = 'Viva',
'dead' = 'Muerta'))%>%
mutate(Condition=recode(Condition, 'the best' = 'great'))%>%
mutate(Height=recode(Height, 'above the knee' = 'above knee',
'above shoulders' = 'above shoulder',
'taller than Daniel' = 'taller than Dana',
'1.5 Daniels' = 'taller than Dana',
'2 Daniels' = 'taller than Dana',
'mid hip' = 'hip',
'low hip' = 'below hip'))%>%
mutate(Canopy_cover=recode(`Canopy cover`, 'patial shade' = 'partial shade',
'mostly  sun' = 'mostly sun',
'total sun' = 'full sun'))%>%
#assigns numeric values to continuous variables
mutate(Condition_num=as.factor(recode(Condition,
'dead' = '0',
'poor' = '0.25',
'fair' = '0.5',
'good' = '0.75',
'great' = '1')))%>%
mutate(Canopy_num=recode(Canopy_cover,
'full shade' = '0',
'mostly shade' = '0.25', 'partial sun' = '0.25',
'half shade' = '0.5', 'half sun' = '0.5',
'partial shade' = '0.75', 'mostly sun' = '0.75',
'full sun' = '1'))%>%
mutate(Height_cm=recode(Height,
'N/A' = '0',
'below ankle' = '0-7.5',
'ankle' = '7.5-16.5',
'above ankle' = '16.5-29.5',
'mid shin' = '29.5-39.5',
'below knee' = '39.5-47',
'knee' = '47-57.5',
'above knee' = '57.5-71.5',
'below hip'= '71.5-85',
'hip' = '85-96.5',
'above hip' = '96.5-109.5',
'mid torso' = '109.5-123.5',
'below shoulders' = '123.5-136',
'shoulder' = '136-147',
'above shoulder' = '147-158.5',
'Dana height' = '158.5-171.5',
'taller than Dana' = '>171.5'
))%>%
mutate(Height_lower=recode(Height,
'N/A' = '0',
'below ankle' = '0',
'ankle' = '7.5',
'above ankle' = '16.5',
'mid shin' = '29.5',
'below knee' = '39.5',
'knee' = '47',
'above knee' = '57.5',
'below hip'= '71.5',
'hip' = '85',
'above hip' = '96.5',
'mid torso' = '109.5',
'below shoulders' = '123.5',
'shoulder' = '136',
'above shoulder' = '147',
'Dana height' = '158.5',
'taller than Dana' = '171.5'))%>%
mutate(Height_upper=recode(Height,
'N/A' = '0',
'below ankle' = '7.5',
'ankle' = '16.5',
'above ankle' = '29.5',
'mid shin' = '39.5',
'below knee' = '47',
'knee' = '57.5',
'above knee' = '71.5',
'below hip'= '85',
'hip' = '96.5',
'above hip' = '109.5',
'mid torso' = '123.5',
'below shoulders' = '136',
'shoulder' = '147',
'above shoulder' = '158.5',
'Dana height' = '171.5',
'taller than Dana' = '343'
))%>%
#converts variables into numeric so they can do math
mutate(Canopy_num=as.factor(Canopy_num))%>%
mutate(Height_cm=as.factor(Height_cm))%>%
mutate(MetalTagID = `Metal tag ID`)%>%
mutate(MetalTagID = as.character(MetalTagID)) #Some of the tags have an A/B
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
dplyr::select(Ranch, MetalTagID, Monitor4)%>% #these are the only columns we need to carry over to add the fourth monitoring date and then update survivorship curves
left_join(seedlings_clean, ., by = 'MetalTagID')%>%
#Adding to previous Outcome in seedlings_clean
mutate(Outcome = case_when((Monitor4 == 'Nueva' | Monitor4 == 'Viva') ~ 'Alive',
(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied_conservative in seedlings_clean:
#DateDied_conservative is calculated based on last positive observation
mutate(DateDied_conservative = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ (DatePlanted),
((Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta') | is.na(Monitor2)) ~ (Monitor1Date+1),
((Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta') | is.na(Monitor3)) ~ (Monitor2Date+1),
((Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta') | is.na(Monitor4)) ~ (Monitor3Date+1),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#DateDied_liberal is the day before it is observed Dead
mutate(DateDied_liberal = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ Monitor1Date-1,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor2Date-1,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor3Date-1,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor4Date-1,
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#DateDied_med is the mid-point between Monitoring dates
mutate(DateDied_med = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ date(int_end(interval((DatePlanted), Monitor1Date)/2)),
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ date(int_end(interval(Monitor1Date, Monitor2Date)/2)),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ date(int_end(interval(Monitor2Date, Monitor3Date)/2)),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ date(int_end(interval(Monitor3Date, Monitor4Date)/2)),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA))%>%
#If TimeAlive_conservative is negative because DatePlanted occurs after DateDied_conservative, use DatePlanted; otherwise default to DateDied_conservative
mutate(DateDied_conservative = case_when(DateDied_conservative <= DatePlanted ~ DatePlanted, .default = DateDied_conservative))%>%
mutate(DateDied_liberal = case_when(DateDied_liberal <= DatePlanted ~ DatePlanted, .default = DateDied_liberal))%>%
mutate(DateDied_med = case_when(DateDied_med <= DatePlanted ~ DatePlanted, .default = DateDied_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive_conservative is calculated based on outcome and time betweeen DatePlanted &  DateDied_conservative
mutate(TimeAlive_conservative = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied_conservative - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_conservative - DatePlanted)))%>%
#TimeAlive_liberal is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_liberal = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_liberal - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_liberal - DatePlanted)))%>%
#TimeAlive_med is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_med = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_med - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_med - DatePlanted)))%>%
mutate(RatioTimeAlive_conservative = (as.numeric(TimeAlive_conservative)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_liberal = (as.numeric(TimeAlive_liberal)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_med = (as.numeric(TimeAlive_med)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
#Also add TimeAlive_liberal & med
#adds TimeAlive_conservative info to our outplanted individuals from Daniel's database
outplanted_seedlings_nov24 <- outplanted_seedlings_nov24%>%
left_join(., dplyr::select(seedlings_clean_joined, c('MetalTagID', 'TimeAlive_conservative', 'TimeAlive_liberal', 'TimeAlive_med')), by = 'MetalTagID')%>%
rename('Notes' = 'Notes/comments')%>%
#below is to add TimeAlive_conservative to individuals missing TimeAlive_conservative
mutate(DatePlanted = case_when(
str_detect(Notes, 'festival') ~ '08/12/2023',
str_detect(Ranch, 'San Dio') ~ '01/09/2023'))%>%#We don't know the exact date in September they were planted, so we are using Sept 1st
#Add other TimeAlives
mutate(TimeAlive_conservative = case_when(
!is.na(DatePlanted) ~ (Monitor4Date+1) - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive_conservative))%>%
mutate(TimeAlive_liberal = case_when(
!is.na(DatePlanted) ~ (Monitor4Date+1) - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive_liberal))%>%
mutate(TimeAlive_med = case_when(
!is.na(DatePlanted) ~ (Monitor4Date+1) - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive_med))%>%
mutate(TimeAlive_conservative = as.numeric(TimeAlive_conservative))%>%
mutate(TimeAlive_liberal = as.numeric(TimeAlive_liberal))%>%
mutate(TimeAlive_med = as.numeric(TimeAlive_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - dmy(DatePlanted))
temp3 <- seedlings_clean_joined %>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
dplyr::select(Ranch, MetalTagID, Monitor4)%>% #these are the only columns we need to carry over to add the fourth monitoring date and then update survivorship curves
left_join(seedlings_clean, ., by = 'MetalTagID')%>%
#Adding to previous Outcome in seedlings_clean
mutate(Outcome = case_when((Monitor4 == 'Nueva' | Monitor4 == 'Viva') ~ 'Alive',
(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied_conservative in seedlings_clean:
#DateDied_conservative is calculated based on last positive observation
mutate(DateDied_conservative = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ (DatePlanted),
((Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta') | is.na(Monitor2)) ~ (Monitor1Date+1),
((Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta') | is.na(Monitor3)) ~ (Monitor2Date+1),
((Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta') | is.na(Monitor4)) ~ (Monitor3Date+1),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA_character_))%>%
#DateDied_liberal is the day before it is observed Dead
mutate(DateDied_liberal = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ Monitor1Date-1,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor2Date-1,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor3Date-1,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor4Date-1,
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA_character_))%>%
#DateDied_med is the mid-point between Monitoring dates
mutate(DateDied_med = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ date(int_end(interval((DatePlanted), Monitor1Date)/2)),
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ date(int_end(interval(Monitor1Date, Monitor2Date)/2)),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ date(int_end(interval(Monitor2Date, Monitor3Date)/2)),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ date(int_end(interval(Monitor3Date, Monitor4Date)/2)),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA_character_))%>%
#If TimeAlive_conservative is negative because DatePlanted occurs after DateDied_conservative, use DatePlanted; otherwise default to DateDied_conservative
mutate(DateDied_conservative = case_when(DateDied_conservative <= DatePlanted ~ DatePlanted, .default = DateDied_conservative))%>%
mutate(DateDied_liberal = case_when(DateDied_liberal <= DatePlanted ~ DatePlanted, .default = DateDied_liberal))%>%
mutate(DateDied_med = case_when(DateDied_med <= DatePlanted ~ DatePlanted, .default = DateDied_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive_conservative is calculated based on outcome and time betweeen DatePlanted &  DateDied_conservative
mutate(TimeAlive_conservative = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied_conservative - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_conservative - DatePlanted)))%>%
#TimeAlive_liberal is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_liberal = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_liberal - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_liberal - DatePlanted)))%>%
#TimeAlive_med is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_med = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_med - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_med - DatePlanted)))%>%
mutate(RatioTimeAlive_conservative = (as.numeric(TimeAlive_conservative)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_liberal = (as.numeric(TimeAlive_liberal)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_med = (as.numeric(TimeAlive_med)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
temp3 <- seedlings_clean_joined %>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
dplyr::select(Ranch, MetalTagID, Monitor4)%>% #these are the only columns we need to carry over to add the fourth monitoring date and then update survivorship curves
left_join(seedlings_clean, ., by = 'MetalTagID')%>%
#Adding to previous Outcome in seedlings_clean
mutate(Outcome = case_when((Monitor4 == 'Nueva' | Monitor4 == 'Viva') ~ 'Alive',
(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied_conservative in seedlings_clean:
#DateDied_conservative is calculated based on last positive observation
mutate(DateDied_conservative = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ (DatePlanted),
((Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta') | is.na(Monitor2)) ~ (Monitor1Date+1),
((Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta') | is.na(Monitor3)) ~ (Monitor2Date+1),
((Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta') | is.na(Monitor4)) ~ (Monitor3Date+1),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA_character_))%>%
#DateDied_liberal is the day before it is observed Dead
mutate(DateDied_liberal = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ Monitor1Date-1,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor2Date-1,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor3Date-1,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor4Date-1,
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA_character_))%>%
#DateDied_med is the mid-point between Monitoring dates
mutate(DateDied_med = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ date(int_end(interval((DatePlanted), Monitor1Date)/2)),
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ date(int_end(interval(Monitor1Date, Monitor2Date)/2)),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ date(int_end(interval(Monitor2Date, Monitor3Date)/2)),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ date(int_end(interval(Monitor3Date, Monitor4Date)/2)),
(Monitor4 == 'Viva' | Monitor4 == 'Nueva') ~ NA_character_))%>%
#If TimeAlive_conservative is negative because DatePlanted occurs after DateDied_conservative, use DatePlanted; otherwise default to DateDied_conservative
mutate(DateDied_conservative = case_when(DateDied_conservative <= DatePlanted ~ DatePlanted, .default = DateDied_conservative))%>%
mutate(DateDied_liberal = case_when(DateDied_liberal <= DatePlanted ~ DatePlanted, .default = DateDied_liberal))%>%
mutate(DateDied_med = case_when(DateDied_med <= DatePlanted ~ DatePlanted, .default = DateDied_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive_conservative is calculated based on outcome and time betweeen DatePlanted &  DateDied_conservative
mutate(TimeAlive_conservative = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied_conservative - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_conservative - DatePlanted)))%>%
#TimeAlive_liberal is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_liberal = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_liberal - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_liberal - DatePlanted)))%>%
#TimeAlive_med is calculated based on outcome and time betweeen DatePlanted &  DateDied_liberal
mutate(TimeAlive_med = case_when(Outcome == 'Alive' ~ (Monitor4Date - DatePlanted),
Outcome == 'Dead' ~ (DateDied_med - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied_med - DatePlanted)))%>%
mutate(RatioTimeAlive_conservative = (as.numeric(TimeAlive_conservative)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_liberal = (as.numeric(TimeAlive_liberal)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(RatioTimeAlive_med = (as.numeric(TimeAlive_med)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
#Also add TimeAlive_liberal & med
#adds TimeAlive_conservative info to our outplanted individuals from Daniel's database
outplanted_seedlings_nov24 <- outplanted_seedlings_nov24%>%
left_join(., dplyr::select(seedlings_clean_joined, c('MetalTagID', 'TimeAlive_conservative', 'TimeAlive_liberal', 'TimeAlive_med')), by = 'MetalTagID')%>%
rename('Notes' = 'Notes/comments')%>%
#below is to add TimeAlive_conservative to individuals missing TimeAlive_conservative
mutate(DatePlanted = case_when(
str_detect(Notes, 'festival') ~ '08/12/2023',
str_detect(Ranch, 'San Dio') ~ '01/09/2023'))%>%#We don't know the exact date in September they were planted, so we are using Sept 1st
#Add other TimeAlives
mutate(TimeAlive_conservative = case_when(
!is.na(DatePlanted) ~ (Monitor4Date+1) - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive_conservative))%>%
mutate(TimeAlive_liberal = case_when(
!is.na(DatePlanted) ~ (Monitor4Date+1) - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive_liberal))%>%
mutate(TimeAlive_med = case_when(
!is.na(DatePlanted) ~ (Monitor4Date+1) - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive_med))%>%
mutate(TimeAlive_conservative = as.numeric(TimeAlive_conservative))%>%
mutate(TimeAlive_liberal = as.numeric(TimeAlive_liberal))%>%
mutate(TimeAlive_med = as.numeric(TimeAlive_med))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - dmy(DatePlanted))
temp3 <- seedlings_clean_joined %>%
select(c("DatePlanted", "DateDied_conservative", "DateDied_liberal", "DateDied_med", "TimeAlive_conservative", "TimeAlive_liberal", "TimeAlive_med", "PotentialTimeAlive"))%>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead")))%>%
filter(Condition == "Alive")
