mutate(PotentialTimeAlive = LastObservedDateM4 - dmy(DatePlanted))
####FOR LOOP: SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
#not represented in Daniel's dataset, but that we found and can encorporate into survivorship curve
nov24_notindaniel <- outplanted_seedlings_nov24%>%
filter(MetalTagID %notin% seedlings_clean_joined$MetalTagID)%>%
filter(!is.na(TimeAlive_conservative))%>%
dplyr::select(c(TimeAlive_conservative, TimeAlive_liberal, TimeAlive_med, PotentialTimeAlive))
input_for_df_age <- seedlings_clean_joined%>%
dplyr::select(c(TimeAlive_conservative, TimeAlive_liberal, TimeAlive_med, PotentialTimeAlive))%>%
rbind(nov24_notindaniel)
max_age <- as.numeric(max(input_for_df_age$TimeAlive_conservative, na.rm = TRUE))
df_age <-
data.frame("Days"=seq(0, max_age, 1), "TotalAlive" = NA)
#for loop: how many individuals were still alive at any given duration?
#with Monitor4 added
for (i in 1:nrow(df_age)) {
Day <- df_age$Days[i] #df_age$Days is a vector (one column in this df)
Num_seedlings_alive <- sum(Day <= input_for_df_age$TimeAlive_conservative, na.rm = TRUE)
#Day is a temporary object that holds the output of the day we are on in the iterative loop
df_age$TotalAlive[i] <- paste0(Num_seedlings_alive)
#fill one cell per iteration with the total number of seedlings alive by that day
}
waterfall_plot_df<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead",
TimeAlive_liberal == PotentialTimeAlive ~ "Alive",
TimeAlive_liberal != PotentialTimeAlive ~ "Dead",
TimeAlive_med == PotentialTimeAlive ~ "Alive",
TimeAlive_med != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_conservative))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_conservative + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_Dead <- waterfall_plot_df%>%
filter(Condition == "Dead")
#CONSERVATIVE
waterfall_plot_df %>%
ggplot(aes(x = TimeAlive_conservative)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_Dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Conservative') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 0, linetype="dashed", color='red') +  #marks 0 year
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
theme_classic()
waterfall_plot_df<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_conservative))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_conservative + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
waterfall_plot_df %>%
ggplot(aes(x = TimeAlive_liberal)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_Dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: liberal') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 0, linetype="dashed", color='red') +  #marks 0 year
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
theme_classic()
#Make med
waterfall_plot_df<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_conservative))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_conservative + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
waterfall_plot_df_conservative<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_conservative))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_conservative + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_conservative_dead <- waterfall_plot_df_conservative%>%
filter(Condition == "Dead")
#CONSERVATIVE
waterfall_plot_df_conservative%>%
ggplot(aes(x = TimeAlive_conservative)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_conservative_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Conservative') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 0, linetype="dashed", color='red') +  #marks 0 year
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
theme_classic()
waterfall_plot_df_liberal<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_liberal == PotentialTimeAlive ~ "Alive",
TimeAlive_liberal != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_liberal))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_liberal + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_liberal_dead <- waterfall_plot_df_liberal%>%
filter(Condition == "Dead")
waterfall_plot_df_liberal %>%
ggplot(aes(x = TimeAlive_liberal)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_liberal_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: liberal') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 0, linetype="dashed", color='red') +  #marks 0 year
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
theme_classic()
View(input_for_df_age)
View(waterfall_plot_df_liberal_dead)
View(waterfall_plot_df_liberal)
View(waterfall_plot_df_conservative)
View(seedlings_clean_joined)
View(seedlings_clean)
#Make med
waterfall_plot_df_med_dead <- waterfall_plot_df_med%>%
filter(Condition == "Dead")
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_conservative_dead <- waterfall_plot_df_conservative%>%
filter(Condition == "Dead")
waterfall_plot_df_liberal_dead <- waterfall_plot_df_liberal%>%
filter(Condition == "Dead")
waterfall_plot_df_med_dead <- waterfall_plot_df_med%>%
filter(Condition == "Dead")
#CONSERVATIVE
waterfall_plot_df_conservative<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_conservative))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_conservative + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_conservative_dead <- waterfall_plot_df_conservative%>%
filter(Condition == "Dead")
waterfall_plot_df_conservative%>%
ggplot(aes(x = TimeAlive_conservative)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_conservative_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Conservative') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 0, linetype="dashed", color='red') +  #marks 0 year
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
theme_classic()
#LIBERAL
waterfall_plot_df_liberal<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_liberal == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_conservative))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_conservative + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#LIBERAL
waterfall_plot_df_liberal<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_liberal == PotentialTimeAlive ~ "Alive",
TimeAlive_liberal != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_liberal))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_liberal + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
waterfall_plot_df_liberal%>%
ggplot(aes(x = TimeAlive_liberal)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_liberal_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Liberal') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 0, linetype="dashed", color='red') +  #marks 0 year
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
theme_classic()
#MED
waterfall_plot_df_med<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_med == PotentialTimeAlive ~ "Alive",
TimeAlive_med != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_med))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_med + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_med value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_med_dead <- waterfall_plot_df_med%>%
filter(Condition == "Dead")
waterfall_plot_df_med%>%
ggplot(aes(x = TimeAlive_med)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_med_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Med') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 0, linetype="dashed", color='red') +  #marks 0 year
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
theme_classic()
outplanted_seedlings_nov24_for_analysis_no_dead <- outplanted_seedlings_nov24%>%
filter(Condition_num != '0')%>%
mutate(Condition_num = as.factor(as.character(Condition_num)))%>%
filter(!is.na(Canopy_num))%>% #making a dataset with no na's so that dredge can run
mutate(Ranch=recode(Ranch, 'La Rueda (Palapa)' = 'La Rueda')) #combining a ranch with a single obs with the other portion of that same ranch
outplanted_seedlings_nov24_for_analysis_no_dead %>%
ggplot(., aes(x = Condition_num, y = as.numeric(Canopy_num))) +
geom_boxplot(size = .75) +
geom_jitter(alpha = .5) +
facet_grid(~Ranch, margins = TRUE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#start of ordinal regression
# fit ordered logit model and store results 'r'
full_model <- polr(Condition_num ~ Canopy_num + Ranch + Region, data = outplanted_seedlings_nov24_for_analysis_no_dead, Hess=TRUE, na.action = "na.fail")
#Dredging the full model to examine which we should keep
dredge(full_model)
best_model <- polr(Condition_num ~ Canopy_num + Ranch, data = outplanted_seedlings_nov24_for_analysis_no_dead, Hess=TRUE, na.action = "na.fail")
## view a summary of the best model
summary(best_model)
## store table
(ctable <- coef(summary(best_model)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
## combined table
(ctable <- cbind(ctable, "p value" = p))
(ci <- confint(best_model)) # default method gives profiled CIs
confint.default(best_model) # CIs assuming normality
## odds ratios: how much more likely is this thing than anything else?
exp(coef(best_model))
## OR and CI
exp(cbind(OR = coef(best_model), ci))
#checking assumption that relationship between each pair of outcome groups (condition bins) is the same
brant(best_model)
#checking psuedo r2
null_model <- polr(Condition_num ~ 1, data = outplanted_seedlings_nov24_for_analysis_no_dead, Hess=TRUE, na.action = "na.fail")
summary(null_model)
null_loglik <- null_model$deviance/-2
best_loglik <- best_model$deviance/-2
mcfadden_r2 <- 1 - (best_loglik / null_loglik) #info on this R2 --> https://www.numberanalytics.com/blog/comprehensive-guide-mcfaddens-r-squared-logistic-regression but basically this is the level of improvement of the fitted model over the null model
sf <- function(y) {
c('Y>=0' = qlogis(mean(y >= 0)),
'Y>=0.25' = qlogis(mean(y >= 0.25)),
'Y>=0.5' = qlogis(mean(y >= 0.5)),
'Y>=0.75' = qlogis(mean(y >= 0.75)),
'Y>=1' = qlogis(mean(y >= 1)))
}
(s <- with(outplanted_seedlings_nov24, summary(as.numeric(Condition_num) ~ Region + Canopy_num, fun=sf)))
####INTERVAL REGRESSION####
# bivariate plots
outplanted_seedlings_nov24%>%
mutate(Height_lower=as.numeric(Height_lower))%>%
mutate(Height_upper=as.numeric(Height_upper))%>%
dplyr::select(c(Height_upper, Height_lower, Condition_num, Canopy_num, Region))%>%
ggpairs(., lower = list(combo = "box"),
upper = list(combo = "blank"))
outplanted_seedlings_nov24_aov <- outplanted_seedlings_nov24%>%
filter(!is.na(TimeAlive_conservativeNum))%>%
mutate(Ranch=recode(Ranch, 'La Rueda (Palapa)' = 'La Rueda'))%>%
mutate(Height_lower=as.numeric(Height_lower))%>%
mutate(Height_upper=as.numeric(Height_upper))%>%
mutate(Height_lower_standardized=Height_lower/TimeAlive_conservativeNum)%>%
mutate(Height_upper_standardized=Height_upper/TimeAlive_conservativeNum)%>%
mutate(Canopy_num = as.factor(Canopy_num))%>%
mutate(Condition_num = as.factor(Condition_num))%>%
mutate(Ranch = as.factor(Ranch))%>%
mutate(Region = as.factor(Region))%>%
dplyr::select(c(Height_upper_standardized, Height_lower_standardized, Canopy_num, Condition_num, Ranch, Region))
#CONDITION FREQ, FACET BY CANOPY
#calculates sample size for each Canopy class
Canopy_summary <- outplanted_seedlings_nov24_aov %>%
group_by(Canopy_num) %>%
summarise(samp = n())
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x = Canopy_num, fill = Region), position = 'fill') +
theme_classic()
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
theme_classic()
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
theme_classic()
outplanted_seedlings_nov24%>%
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#dddddd",
"#aaaaaa",
"#777777",
"#555555",
"#333333"))+
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
# scale_fill_manual(values=c("#dddddd",
"#aaaaaa",
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
# scale_fill_manual(values=c("#dddddd",
#                           "#aaaaaa",
#                          "#777777",
#                         "#555555",
#                        "#333333"))+
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#F8766D",
"#F95146",
"#F9a09a",
"#00BA38",
"#68e98f",
"#308a4b",
"#619CFF",
"#Afcaf8",
"#114cb0"))+
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#394cb0", #La Rueda
"#308a4b", #La Semilla
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"#Santo Domingo
))+
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#394cb0", #La Rueda
"#124cd0", #La Rueda Palapa
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"))+#Santo Domingo
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x = Condition_num, fill = Region), position = 'fill') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#394cb0", #La Rueda
"#124cd0", #La Rueda Palapa
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"))+#Santo Domingo
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x = Canopy_num, fill = Region), position = 'fill') +
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#394cb0", #La Rueda
"#124cd0", #La Rueda Palapa
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"))+#Santo Domingo
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x = Condition_num, fill = Region), position = 'fill') +
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Condition_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#394cb0", #La Rueda
"#124cd0", #La Rueda Palapa
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"))+#Santo Domingo
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#394cb0", #La Rueda
"#124cd0", #La Rueda Palapa
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"))+#Santo Domingo
theme_classic()
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Condition_num, fill = Ranch), position = 'fill') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#394cb0", #La Rueda
"#124cd0", #La Rueda Palapa
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"))+#Santo Domingo
theme_classic()
