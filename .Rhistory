rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>%#reclass Perdida (poor) as Muerta (dead)
#calculate when a seedling died based on the last Monitoring date it was seen alive
add_column(DateDied = NA)%>%
mutate(DateDied = case_when((Monitor1 == 'Muerta') | (Monitor1 == 'Viva' & Monitor2 == 'Muerta') ~ DatePlanted,
(Monitor1 == 'Nueva' & Monitor2 == 'Muerta') ~ '13-02-2022',
(Monitor1 == 'Nueva' & Monitor3 == 'Muerta') | (Monitor1 == 'Viva' & Monitor3 == 'Muerta') | (Monitor2 == 'Nueva' & Monitor3 == 'Muerta') ~ '20-01-2023'))%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)%>%#days since it was first planted
mutate(RatioTimeAlive = TimeAlive / PotentialTimeAlive) #this should no longer be classed as a date
View(seedlings_clean)
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
rename(Monitor4 = 'Monitoreo 1 (__/__/__)')%>%
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>%#reclass Perdida (poor) as Muerta (dead)
#calculate when a seedling died based on the last Monitoring date it was seen alive
add_column(DateDied = NA)%>%
mutate(DateDied = case_when((Monitor1 == 'Muerta') | (Monitor1 == 'Viva' & Monitor2 == 'Muerta') ~ DatePlanted,
(Monitor1 == 'Nueva' & Monitor2 == 'Muerta') ~ '13-02-2022',
(Monitor1 == 'Nueva' & Monitor3 == 'Muerta') | (Monitor1 == 'Viva' & Monitor3 == 'Muerta') | (Monitor2 == 'Nueva' & Monitor3 == 'Muerta') ~ '20-01-2023'))%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)
View(seedlings_clean)
mutate(RatioTimeAlive = TimeAlive / PotentialTimeAlive)
#renames columns to simplified English, differentiates seed origin and seedling planted region
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
rename(Monitor4 = 'Monitoreo 1 (__/__/__)')%>%
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>%#reclass Perdida (poor) as Muerta (dead)
#calculate when a seedling died based on the last Monitoring date it was seen alive
add_column(DateDied = NA)%>%
mutate(DateDied = case_when((Monitor1 == 'Muerta') | (Monitor1 == 'Viva' & Monitor2 == 'Muerta') ~ DatePlanted,
(Monitor1 == 'Nueva' & Monitor2 == 'Muerta') ~ '13-02-2022',
(Monitor1 == 'Nueva' & Monitor3 == 'Muerta') | (Monitor1 == 'Viva' & Monitor3 == 'Muerta') | (Monitor2 == 'Nueva' & Monitor3 == 'Muerta') ~ '20-01-2023'))%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)%>%#days since it was first planted
mutate(RatioTimeAlive = TimeAlive / PotentialTimeAlive) #this should no longer be classed as a date
summary(seedlings_clean)
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#renames columns to simplified English, differentiates seed origin and seedling planted region
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
rename(Monitor4 = 'Monitoreo 1 (__/__/__)')%>%
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>%#reclass Perdida (poor) as Muerta (dead)
#calculate when a seedling died based on the last Monitoring date it was seen alive
add_column(DateDied = NA)%>%
mutate(DateDied = case_when((Monitor1 == 'Muerta') | (Monitor1 == 'Viva' & Monitor2 == 'Muerta') ~ DatePlanted,
(Monitor1 == 'Nueva' & Monitor2 == 'Muerta') ~ '13-02-2022',
(Monitor1 == 'Nueva' & Monitor3 == 'Muerta') | (Monitor1 == 'Viva' & Monitor3 == 'Muerta') | (Monitor2 == 'Nueva' & Monitor3 == 'Muerta') ~ '20-01-2023'))%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)%>%#days since it was first planted
mutate(RatioTimeAlive = TimeAlive / PotentialTimeAlive) #this line doesn't work because PotentialTimeAlive is a difftime?
summary(seedlings_clean)
rm(list=ls())
setwd("..")
library(tidyverse)
library(ggplot2)
library(dplyr)
`%notin%` <- Negate(`%in%`)
field_data <- read_csv("./data/04_2024_field_datasheets_full.csv", na = c("N/A",""))
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity")
rm(list=ls())
rm(list=ls())
setwd("..")
library(tidyverse)
library(ggplot2)
library(dplyr)
`%notin%` <- Negate(`%in%`)
field_data <- read_csv("./data/04_2024_field_datasheets_full.csv", na = c("N/A",""))
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity/data")
rm(list=ls())
setwd("..")
library(tidyverse)
library(ggplot2)
library(dplyr)
`%notin%` <- Negate(`%in%`)
field_data <- read_csv("./data/04_2024_field_datasheets_full.csv", na = c("N/A",""))
#cleaning raw field data so we can graph it
field_data_clean <- field_data %>%
rename(QUBR_ID =`QUBR ID`) %>% #renaming QUBR_ID column to remove space
rename(Recorder_name =`Name of recorder`) %>% #renaming recorder_name column to remove space
mutate(Site = case_when(str_detect(Site, "[?]$") ==T ~ NA, #overriding column called Site, anywhere with a ? becomes NA
str_detect(Site, "[?]$") == F ~ Site)) %>%
mutate(Region = case_when(str_detect(Region, "[?]") ==T ~ NA, #overriding column called Region, anywhere with a ? becomes NA
str_detect(Region, "[?]") == F ~ Region))
#creating bar graph
field_data_clean %>%
ggplot() + #creates empty plot
geom_bar(aes(x = Region, fill = Region)) + #plots Regions on the x axis and gives each their own color
theme_classic() #removes gray background
field_data_clean %>%
ggplot() + #creates empty plot
geom_bar(aes(x = Site, fill = Site)) +
theme_classic() +
facet_grid(~Region) #nests sites within region
#load tissue transfer data
tissue_data <- read_csv("./data/Transfer QUBR Tissue to Freezer 2024 April.csv")
#explore tissue transfer data (what kinds of columns, NAs, left_join function to join by QUBR_ID column)
#(same column name in both data sets)
tissue_data_clean <- tissue_data%>%
rename(Color = `Leaf Tissue Color (Green, Brown, Black)`)%>% #rename leaf color column
rename(Condition = `Leaf Tissue Condition (Moldy, Necrotic, or Good)`)%>% #rename leaf condition column
rename(Weight = `Weight (g)`) %>% #rename weight column to remove units
rename(QUBR_ID = `Accession ID`)%>%
filter(str_detect(Color, "reen")) %>% #selects only colors named Green and green
filter(str_detect(Condition, "Good"))
tissue_field_data <- tissue_data_clean%>% #joins field data and tissue transfer data by QUBR_ID
left_join(., field_data_clean, join_by(QUBR_ID==QUBR_ID))
tissue_field_for_extraction <- tissue_field_data %>%
filter(Weight>=0.04) #removes leaf samples that are too small to do extraction with
tissue_field_for_extraction%>%
ggplot() + #creates empty plot
geom_bar(aes(x = Color, fill = Color)) +
theme_classic() #removes gray background
summary(tissue_field_for_extraction) #shows character vs numeric value details
tissue_field_for_extraction%>% #bar chart of number of tissue samples per region
ggplot() +
geom_bar(aes(x = Region, fill = Region)) +
theme_classic()
tissue_field_for_extraction%>% #box plot of tissue weights per region
ggplot() +
geom_boxplot(aes(x = Region, y = Weight, fill = Region)) +
theme_classic()
#how many inds from each region weigh enough to do extractions
num_inds_by_region <- tissue_field_for_extraction %>%
group_by(Region) %>%
summarise(count = n())
#v few from the W --> we are hoping to do 600 extractions which would mean 200 from each region and we have less than that from the W --> will do all of those and then divide the remaining number of inds by 2 to figure out how many inds to sample from E and N
num_west <- num_inds_by_region$count[num_inds_by_region$Region=="W"][1]
num_na <- num_inds_by_region$count[is.na(num_inds_by_region$Region)]
num_to_sample <- floor((600-num_west-num_na)/2)
#Separate tissue with high enough weight to do actual extractions into different regions
tissue_west_and_NAs <- tissue_field_for_extraction%>% #we will extract from all of these samples from the West because there are so few
filter(Region == 'W' | is.na(Region))
#look at the weights of the viable W inds to see how close to problematic they are
tissue_west_and_NAs%>%
ggplot() +
geom_col(aes(x = QUBR_ID, y = Weight)) +
geom_hline(yintercept = .04, color = "red") + #add red line at minimum viable weight for extraction
theme_classic()
#5 inds with literally no buffer room but mostly this seems fine
tissue_east <- tissue_field_for_extraction%>%
filter(Region == 'E')
tissue_north <- tissue_field_for_extraction%>%
filter(Region == 'N')
#randomly sample the correct number of inds from N and E
set.seed(2024)
north_inds_to_sample <- sample(tissue_north$QUBR_ID, size = num_to_sample, replace = F)
east_inds_to_sample <- sample(tissue_east$QUBR_ID, size = num_to_sample, replace = F)
#create dataset with only 600 chosen inds for extractions
tissue_field_600_inds <- tissue_field_for_extraction %>%
filter(QUBR_ID %in% tissue_west_and_NAs$QUBR_ID | QUBR_ID %in% north_inds_to_sample | QUBR_ID %in% east_inds_to_sample)
#take the top 100 heaviest weights, these will be the first 100 extractions
top_100_for_extractions <- tissue_field_600_inds %>%
top_n(., 100, wt = Weight)
#maybe unsurprisingly, nearly all of these are from the North
top_100_for_extractions %>%
ggplot() +
geom_bar(aes(x = Region, fill = Region)) +
theme_classic()
# Bind the remaining inds on to this list so we can keep these 100 as the first extractions but then proceed semi randomly
top_100_for_extractions %>%
rbind(filter(tissue_field_600_inds, QUBR_ID %notin% top_100_for_extractions$QUBR_ID)) %>%
write_csv(., "./data/600_inds_for_extractions.csv")
View(tissue_north)
field_data_clean%>%
ggplot() +
geom_bar(aes(x = Region, fill = Region)) +
theme_classic()
field_data_clean%>%
ggplot() +
geom_bar(aes(x = Weight, fill = Region)) +
theme_classic()
field_data_clean%>%
ggplot() +
geom_bar(aes(x = Weight, fill = Region)) +
theme_classic()
field_data_clean%>%
ggplot() +
geom_bar(aes(x = Region, fill = Region)) +
theme_classic()
summary(field_data_clean)
field_data_clean%>%
ggplot() +
geom_boxplot(aes(x = Weight, fill = Region)) +
theme_classic()
field_data_clean%>%
ggplot() +
geom_boxplot(aes(x = Region, fill = Region)) +
theme_classic()
field_data_clean%>%
ggplot() +
geom_histogram(aes(x = Region, fill = Region)) +
theme_classic()
field_data_clean %>%
ggplot() +
geom_bar(x = Region, y = Weight) +
theme_classic()
View(field_data_clean)
View(tissue_data)
tissue_data_clean %>%
ggplot() +
geom_bar(x = Region, y = Weight) +
theme_classic()
View(tissue_data_clean)
View(tissue_field_data)
tissue_field_clean %>%
ggplot() +
geom_bar(x = Region, y = Weight) +
theme_classic()
tissue_field_data %>%
ggplot() +
geom_bar(x = Region, y = Weight) +
theme_classic()
tissue_field_data %>%
ggplot() +
geom_boxplot(x = Region, y = Weight) +
theme_classic()
summary(tissue_field_data)
tissue_field_data %>%
ggplot() +
geom_boxplot(y = Weight, fill = Region) +
theme_classic()
tissue_field_data %>%
ggplot() +
geom_boxplot(aes(y = Weight, fill = Region)) +
theme_classic()
tissue_field_data %>%
ggplot() +
geom_boxplot(aes(x = Region, y = Weight, fill = Region)) +
theme_classic()
tissue_field_data %>%
ggplot() +
geom_boxplot(aes(x = Region, y = Weight, fill = Region)) +
theme_classic()
tissue_field_data%>%
ggplot() +
geom_bar(aes(x = Region, fill = Region)) +
theme_classic()
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
setwd("..")
#assigns values for the dates monitoring took place
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity/data")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
setwd("..")
#assigns values for the dates monitoring took place
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
outplanted_seedlings24 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2024.csv")
summary(outplanted_seedlings23)
summary(outplanted_seedlings24)
summary(seedlings_combined)
#combines data from 2023 and 2024 tabs
seedlings_combined <- bind_rows(outplanted_seedlings23, outplanted_seedlings24)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
setwd("..")
#assigns values for the dates monitoring took place
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity/data")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
setwd("..")
#assigns values for the dates monitoring took place
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
outplanted_seedlings24 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2024.csv")
summary(outplanted_seedlings23)
summary(outplanted_seedlings24)
summary(seedlings_combined)
summary(seedlings_clean)
#renames columns to simplified English, differentiates seed origin and seedling planted region
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
rename(Monitor4 = 'Monitoreo 1 (__/__/__)')%>%
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>%#reclass Perdida (poor) as Muerta (dead)
#calculate when a seedling died based on the last Monitoring date it was seen alive
add_column(DateDied = NA)%>%
mutate(DateDied = case_when((Monitor1 == 'Muerta') | (Monitor1 == 'Viva' & Monitor2 == 'Muerta') ~ DatePlanted,
(Monitor1 == 'Nueva' & Monitor2 == 'Muerta') ~ '13-02-2022',
(Monitor1 == 'Nueva' & Monitor3 == 'Muerta') | (Monitor1 == 'Viva' & Monitor3 == 'Muerta') | (Monitor2 == 'Nueva' & Monitor3 == 'Muerta') ~ '20-01-2023'))%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)%>%#days since it was first planted
mutate(RatioTimeAlive = TimeAlive / PotentialTimeAlive) #this line doesn't work because you can't divide difftimes, but I needed to convert those columns to
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
setwd("..")
#assigns values for the dates monitoring took place
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity/data")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
setwd("..")
#assigns values for the dates monitoring took place
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
outplanted_seedlings24 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2024.csv")
summary(outplanted_seedlings23)
summary(outplanted_seedlings24)
summary(seedlings_combined)
summary(seedlings_combined)
#combines data from 2023 and 2024 tabs
seedlings_combined <- bind_rows(outplanted_seedlings23, outplanted_seedlings24)
summary(seedlings_combined)
View(seedlings_combined)
Today <- today()
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
#imports Daniel's databases (2023 and 2024 tabs)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023.csv")
outplanted_seedlings24 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2024.csv")
summary(outplanted_seedlings23)
summary(outplanted_seedlings24)
#combines data from 2023 and 2024 tabs
seedlings_combined <- bind_rows(outplanted_seedlings23, outplanted_seedlings24)
summary(seedlings_combined)
#renames columns to simplified English, differentiates seed origin and seedling planted region
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
rename(Monitor4 = 'Monitoreo 1 (__/__/__)')%>%
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>%#reclass Perdida (poor) as Muerta (dead)
#calculate when a seedling died based on the last Monitoring date it was seen alive
add_column(DateDied = NA)%>%
mutate(DateDied = case_when((Monitor1 == 'Muerta') | (Monitor1 == 'Viva' & Monitor2 == 'Muerta') ~ DatePlanted,
(Monitor1 == 'Nueva' & Monitor2 == 'Muerta') ~ '13-02-2022',
(Monitor1 == 'Nueva' & Monitor3 == 'Muerta') | (Monitor1 == 'Viva' & Monitor3 == 'Muerta') | (Monitor2 == 'Nueva' & Monitor3 == 'Muerta') ~ '20-01-2023'))%>%
#format date as DayMonthYear
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = Today - DatePlanted)
View(seedlings_clean)
