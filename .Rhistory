rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
select(-'Monitoreo 1 (__/__/__)')%>% #remove the placeholder column in Daniel's 2024 datasheet for the monitoring we did in Nov 2024
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
rename(`Metal tag ID` = 'Núm. Etiqueta')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>% #reclass Perdida (lost) as Muerta (dead)
add_column(DateDied = NA)%>%
filter(!str_detect(Ranch, "Arroyo:"))%>% #removes individuals from the Arroyo: El Palo Santo for analysis bc we didn't observe them in 2024 (they were fairly new)
#mutate(DatePlanted = dmy(as_date(DatePlanted)))%>%
#calculate when a seedling died based on when it was last positively observed
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3)) | Monitor1 == 'Muerta' ~ dmy(DatePlanted),
(Monitor1 == 'Nueva' | Monitor1 == 'Viva') & (is.na(Monitor2) | Monitor2 == 'Muerta') ~ (Monitor1Date),
(Monitor2 == 'Nueva' | Monitor2 == 'Viva') & (is.na(Monitor3) | Monitor3 == 'Muerta') ~ (Monitor2Date))
seedlings_combined <- bind_rows(outplanted_seedlings23, outplanted_seedlings24)
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
select(-'Monitoreo 1 (__/__/__)')%>% #remove the placeholder column in Daniel's 2024 datasheet for the monitoring we did in Nov 2024
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
rename(`Metal tag ID` = 'Núm. Etiqueta')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>% #reclass Perdida (lost) as Muerta (dead)
add_column(DateDied = NA)%>%
filter(!str_detect(Ranch, "Arroyo:"))%>% #removes individuals from the Arroyo: El Palo Santo for analysis bc we didn't observe them in 2024 (they were fairly new)
#mutate(DatePlanted = dmy(as_date(DatePlanted)))%>%
#calculate when a seedling died based on when it was last positively observed
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3)) | Monitor1 == 'Muerta' ~ dmy(DatePlanted),
(Monitor1 == 'Nueva' | Monitor1 == 'Viva') & (is.na(Monitor2) | Monitor2 == 'Muerta') ~ Monitor1Date,
(Monitor2 == 'Nueva' | Monitor2 == 'Viva') & (is.na(Monitor3) | Monitor3 == 'Muerta') ~ Monitor2Date))
#renames columns to simplified English, differentiates seed origin and seedling planted region
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
select(-'Monitoreo 1 (__/__/__)')%>% #remove the placeholder column in Daniel's 2024 datasheet for the monitoring we did in Nov 2024
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
rename(`Metal tag ID` = 'Núm. Etiqueta')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>% #reclass Perdida (lost) as Muerta (dead)
add_column(DateDied = NA)%>%
filter(!str_detect(Ranch, "Arroyo:"))%>% #removes individuals from the Arroyo: El Palo Santo for analysis bc we didn't observe them in 2024 (they were fairly new)
#calculate when a seedling died based on when it was last positively observed
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3)) | Monitor1 == 'Muerta' ~ dmy(DatePlanted),
(Monitor1 == 'Nueva' | Monitor1 == 'Viva') & (is.na(Monitor2) | Monitor2 == 'Muerta') ~ Monitor1Date,
(Monitor2 == 'Nueva' | Monitor2 == 'Viva') & (is.na(Monitor3) | Monitor3 == 'Muerta') ~ Monitor2Date))%>%
#format date as DayMonthYear
add_column(Outcome = NA)%>%
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
#mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
#If TimeAlive is negative because DatePlanted occurs after DateDied, use DatePlanted
#Otherwise default to using DateDied
mutate(DateDied = case_when(DateDied <= DatePlanted ~ DatePlanted, .default = DateDied))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#Calculate whether an ind is alive base on the most recent positive observation
mutate(Outcome = case_when(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' ~ 'Dead',
Monitor3 == 'Nueva' | Monitor3 == 'Viva' ~ 'Alive',
is.na(Monitor1) | is.na(Monitor2) | is.na(Monitor3) ~ 'Presumed Dead'
))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
#mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = LastObservedDateM3 - DatePlanted)%>% #days since it was first planted
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (LastObservedDateM3 - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
#removes rows for individuals handed out at Festival 2023
filter(!str_detect(Ranch, "Festival"))%>%
mutate(LastObservedDateM3 = LastObservedDateM3)
#Decide priority sites to visit in Baja based on number of potentially living individuals at each ranch
priority_sites <- seedlings_clean%>%
filter(Outcome == 'Alive')%>%
group_by(PlantedReg, Ranch, N, W)%>%
summarise(n())
#adds new columns
outplanted_seedlings_nov24 <- outplanted_seedlings24.field%>%
add_column(Monitor4 = NA)%>%
add_column(Canopy_num = NA)%>%
add_column(Condition_num = NA)%>%
add_column(Height_num = NA)%>%
#interprets dead individuals with a Height of N/A as a Height_num of 0
mutate(Height_num=recode(Height,'N/A' = '0'))%>%
#renames columns to match previous data
mutate(Ranch=recode(Ranch, 'San Dio' = 'Rancho San Dionisio'))%>%
mutate(Ranch=recode(Ranch, 'Santo Do' = 'Santo Domingo'))%>%
mutate(Ranch=recode(Ranch, 'La Palapa' = 'La Rueda (Palapa)'))%>%
mutate(Ranch=recode(Ranch, 'Parque de Santiago' = 'Parque Ecológico Santiago'))%>%
mutate(Ranch=recode(Ranch, 'Santa Gertrudis (orchard)' = 'Santa Gertudris (Huerta)'))%>%
mutate(Ranch=recode(Ranch, 'Santa Gertrudis' = 'Santa Gertudris'))%>%
mutate(Ranch=recode(Ranch, 'Palo Verdal' = 'Palo Verdad'))%>%
#combines equivalent variables
mutate(Monitor4=recode(Condition, 'the best' = 'Viva','great' = 'Viva', 'good' = 'Viva', 'fair' = 'Viva', 'poor' = 'Viva',
'dead' = 'Muerta'))%>%
mutate(Condition=recode(Condition, 'the best' = 'great'))%>%
mutate(Height=recode(Height, 'above the knee' = 'above knee',
'above shoulders' = 'above shoulder',
'taller than Daniel' = 'taller than Dana',
'mid hip' = 'hip',
'low hip' = 'below hip'))%>%
mutate(`Canopy cover`=recode(`Canopy cover`, 'patial shade' = 'partial shade',
'mostly  sun' = 'mostly sun',
'total sun' = 'full sun'))%>%
#assigns numeric values to continuous variables
mutate(Condition_num=recode(Condition,
'dead' = '0',
'poor' = '0.25',
'fair' = '0.5',
'good' = '0.75',
'great' = '1'))%>%
mutate(Canopy_num=recode(`Canopy cover`,
'full shade' = '0',
'mostly shade' = '0.25', 'partial sun' = '0.25',
'half shade' = '0.5', 'half sun' = '0.5',
'partial shade' = '0.75', 'mostly sun' = '0.75',
'full sun' = '1'))%>%
mutate(Height_num=recode(Height, #make this Height_cm
'N/A' = '0',
'below ankle' = '5',
'ankle' = '10',
'above ankle' = '23',
'mid shin' = '36',
'below knee' = '43',
'knee' = '51',
'above knee' = '64',
'below hip'= '79',
'hip' = '91',
'above hip' = '102',
'mid torso' = '117',
'below shoulders' = '130',
'shoulder' = '142',
'above shoulder' = '152',
'Dana height' = '165',
'taller than Dana' = '191',
'1.5 Daniels' = '258',
'2 Daniels' = '344'))%>%
#converts variables into numeric so they can do math
mutate(Date = mdy(Date))%>%
mutate(Condition_num=as.numeric(Condition_num))%>%
mutate(Canopy_num=as.numeric(Canopy_num))%>%
mutate(Height_num=as.numeric(Height_num))%>%
#mutate(Monitor4 = replace_na(Monitor4, 'Muerta'))%>% #I think I can remove this line
mutate(`Metal tag ID` = as.character(`Metal tag ID`)) #Some of the tags have an A/B
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
select(Ranch, `Metal tag ID`, Monitor4)%>% #these are the only parts we care about
left_join(seedlings_clean, ., by = 'Metal tag ID')%>%
#Check that the ranch names match in both source databases
#I can remove this section now
mutate(QualityControl = case_when(Ranch.x == Ranch.y~'y',
Ranch.x != Ranch.y~'n'))%>%
#Adding to previous Outcome in seedlings_clean:
mutate(Outcome = case_when((Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
Monitor4 == 'Nueva' | Monitor4 == 'Viva' ~ 'Alive',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied in seedlings_clean:
#DateDied is calculated based on last positive observation
mutate(DateDied = case_when(is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4) ~ DatePlanted,
(Monitor1 == 'Muerta') ~ DatePlanted,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ dmy(Monitor1Date),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ dmy(Monitor2Date),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ dmy(Monitor3Date)))%>%
#If TimeAlive is negative because DatePlanted occurs after DateDied, use DatePlanted; otherwise default to DateDied
mutate(DateDied = case_when(DateDied <= DatePlanted ~ DatePlanted, .default = DateDied))%>%
#mutate(TimeAlive = DateDied - DatePlanted)%>% #I think I can remove this line (repeated below)
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive is calculated based on outcome and time betweeen DatePlanted &  DateDied
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
select(Ranch, `Metal tag ID`, Monitor4)%>% #these are the only parts we care about
left_join(seedlings_clean, ., by = 'Metal tag ID')%>%
#Check that the ranch names match in both source databases
#I can remove this section now
mutate(QualityControl = case_when(Ranch.x == Ranch.y~'y',
Ranch.x != Ranch.y~'n'))%>%
#Adding to previous Outcome in seedlings_clean:
mutate(Outcome = case_when((Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
Monitor4 == 'Nueva' | Monitor4 == 'Viva' ~ 'Alive',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied in seedlings_clean:
#DateDied is calculated based on last positive observation
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ DatePlanted,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ dmy(Monitor1Date),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ dmy(Monitor2Date),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ dmy(Monitor3Date)))%>%
#If TimeAlive is negative because DatePlanted occurs after DateDied, use DatePlanted; otherwise default to DateDied
mutate(DateDied = case_when(DateDied <= DatePlanted ~ DatePlanted, .default = DateDied))%>%
#mutate(TimeAlive = DateDied - DatePlanted)%>% #I think I can remove this line (repeated below)
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive is calculated based on outcome and time betweeen DatePlanted &  DateDied
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
select(Ranch, `Metal tag ID`, Monitor4)%>% #these are the only parts we care about
left_join(seedlings_clean, ., by = 'Metal tag ID')%>%
#Check that the ranch names match in both source databases
#I can remove this section now
mutate(QualityControl = case_when(Ranch.x == Ranch.y~'y',
Ranch.x != Ranch.y~'n'))%>%
#Adding to previous Outcome in seedlings_clean:
mutate(Outcome = case_when((Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
Monitor4 == 'Nueva' | Monitor4 == 'Viva' ~ 'Alive',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied in seedlings_clean:
#DateDied is calculated based on last positive observation
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ dmy(DatePlanted),
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ dmy(Monitor1Date),
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ dmy(Monitor2Date),
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ dmy(Monitor3Date)))%>%
#If TimeAlive is negative because DatePlanted occurs after DateDied, use DatePlanted; otherwise default to DateDied
mutate(DateDied = case_when(DateDied <= DatePlanted ~ DatePlanted, .default = DateDied))%>%
#mutate(TimeAlive = DateDied - DatePlanted)%>% #I think I can remove this line (repeated below)
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive is calculated based on outcome and time betweeen DatePlanted &  DateDied
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
select(Ranch, `Metal tag ID`, Monitor4)%>% #these are the only parts we care about
left_join(seedlings_clean, ., by = 'Metal tag ID')%>%
#Check that the ranch names match in both source databases
#I can remove this section now
mutate(QualityControl = case_when(Ranch.x == Ranch.y~'y',
Ranch.x != Ranch.y~'n'))%>%
#Adding to previous Outcome in seedlings_clean:
mutate(Outcome = case_when((Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
Monitor4 == 'Nueva' | Monitor4 == 'Viva' ~ 'Alive',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied in seedlings_clean:
#DateDied is calculated based on last positive observation
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ DatePlanted,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor1Date,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor2Date,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor3Date))%>%
#If TimeAlive is negative because DatePlanted occurs after DateDied, use DatePlanted; otherwise default to DateDied
mutate(DateDied = case_when(DateDied <= DatePlanted ~ DatePlanted, .default = DateDied))%>%
#mutate(TimeAlive = DateDied - DatePlanted)%>% #I think I can remove this line (repeated below)
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive is calculated based on outcome and time betweeen DatePlanted &  DateDied
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
####SET UP####
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tibble)
library(lubridate)
library(chisq.posthoc.test)
setwd("C:/Users/DBarry/Desktop/GitHub/QUBR_exsitu_gen_diversity")
Monitor1Date <- dmy("13/02/2022")
Monitor2Date <- dmy("20/01/2023")
Monitor3Date <- dmy("13/12/2023")
Monitor4Date <- dmy("23/11/2024")
LastObservedDateM3 <- Monitor3Date + 1
LastObservedDateM4 <- Monitor4Date + 1
#imports databases (2023 & 2024 tabs, 2024 field work)
outplanted_seedlings23 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2023 03_07_25.csv")
outplanted_seedlings24 <- read_csv("./data/Datos de Siembra en Ranchos_Actualizado_05_2024.xlsx - Datos_Campaña_Seimbra_2024 03_07_25.csv")%>%
mutate('Núm. Etiqueta' = as.character('Núm. Etiqueta')) #interpret MetalTagID as a character, not numeric, because some inds have an A & B
outplanted_seedlings24.field <- read_csv("./data/QUBR Field Datasheets Nov 2024 - filled - OP Seedlings 03_27_25.csv")
####DATA CLEANING####
#combines data from Daniel's 2023 and 2024 tabs
seedlings_combined <- bind_rows(outplanted_seedlings23, outplanted_seedlings24)
#renames columns to simplified English, differentiates seed origin and seedling planted region
seedlings_clean <- seedlings_combined%>%
rename(Name = 'Nombre')%>%
rename(Town = 'Localidad')%>%
rename(Ranch = 'Rancho, Lugar o Sitio')%>%
rename(Monitor1 = '13/02/2022 - Monitoreo 1')%>%
rename(Monitor2 = '20/01/2023 Monitoreo 2')%>%
rename(Monitor3 = '13/12/2023\nMonitoreo 3')%>%
rename(OriginReg = 'Procedencia semilla  (color)')%>%
rename(PlantedReg = 'Región')%>%
rename(DatePlanted = 'Fecha transplante')%>%
rename(YearCollected = 'Año de colecta')%>%
rename(Observations = 'Observaciones')%>%
rename(Contact = 'Contacto')%>%
rename(PlantedIn = 'Sembrado en:')%>%
rename(Watered = 'Lluvia solida')%>%
select(-'Monitoreo 1 (__/__/__)')%>% #remove the placeholder column in Daniel's 2024 datasheet for the monitoring we did in Nov 2024
rename(OriginLabelAsh = 'Procedencia Etiqueta Ash Abril 2024')%>%
rename(`Metal tag ID` = 'Núm. Etiqueta')%>%
mutate(Monitor1=recode(Monitor1, 'Perdida' = 'Muerta'))%>% #reclass Perdida (lost) as Muerta (dead)
add_column(DateDied = NA)%>%
filter(!str_detect(Ranch, "Arroyo:"))%>% #removes individuals from the Arroyo: El Palo Santo for analysis bc we didn't observe them in 2024 (they were fairly new)
#calculate when a seedling died based on when it was last positively observed
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3)) | Monitor1 == 'Muerta' ~ dmy(DatePlanted),
(Monitor1 == 'Nueva' | Monitor1 == 'Viva') & (is.na(Monitor2) | Monitor2 == 'Muerta') ~ Monitor1Date,
(Monitor2 == 'Nueva' | Monitor2 == 'Viva') & (is.na(Monitor3) | Monitor3 == 'Muerta') ~ Monitor2Date))%>%
#format date as DayMonthYear
add_column(Outcome = NA)%>%
add_column(TimeAlive = NA)%>%
add_column(RatioTimeAlive = NA)%>%
add_column(PotentialTimeAlive = NA)%>%
#mutate(DateDied = dmy(DateDied))%>%
mutate(DatePlanted = dmy(DatePlanted))%>%
#If TimeAlive is negative because DatePlanted occurs after DateDied, use DatePlanted
#Otherwise default to using DateDied
mutate(DateDied = case_when(DateDied <= DatePlanted ~ DatePlanted, .default = DateDied))%>%
mutate(RatioTimeAlive = dmy(RatioTimeAlive))%>%
mutate(PotentialTimeAlive = dmy(PotentialTimeAlive))%>%
#Calculate whether an ind is alive base on the most recent positive observation
mutate(Outcome = case_when(Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' ~ 'Dead',
Monitor3 == 'Nueva' | Monitor3 == 'Viva' ~ 'Alive',
is.na(Monitor1) | is.na(Monitor2) | is.na(Monitor3) ~ 'Presumed Dead'
))%>%
#calculate TimeAlive as difference between DatePlanted and DateDied
#mutate(TimeAlive = DateDied - DatePlanted)%>%
mutate(PotentialTimeAlive = LastObservedDateM3 - DatePlanted)%>% #days since it was first planted
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (LastObservedDateM3 - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
#removes rows for individuals handed out at Festival 2023
filter(!str_detect(Ranch, "Festival"))%>%
mutate(LastObservedDateM3 = LastObservedDateM3)
#Decide priority sites to visit in Baja based on number of potentially living individuals at each ranch
priority_sites <- seedlings_clean%>%
filter(Outcome == 'Alive')%>%
group_by(PlantedReg, Ranch, N, W)%>%
summarise(n())
#adds new columns
outplanted_seedlings_nov24 <- outplanted_seedlings24.field%>%
add_column(Monitor4 = NA)%>%
add_column(Canopy_num = NA)%>%
add_column(Condition_num = NA)%>%
add_column(Height_num = NA)%>%
#interprets dead individuals with a Height of N/A as a Height_num of 0
mutate(Height_num=recode(Height,'N/A' = '0'))%>%
#renames columns to match previous data
mutate(Ranch=recode(Ranch, 'San Dio' = 'Rancho San Dionisio'))%>%
mutate(Ranch=recode(Ranch, 'Santo Do' = 'Santo Domingo'))%>%
mutate(Ranch=recode(Ranch, 'La Palapa' = 'La Rueda (Palapa)'))%>%
mutate(Ranch=recode(Ranch, 'Parque de Santiago' = 'Parque Ecológico Santiago'))%>%
mutate(Ranch=recode(Ranch, 'Santa Gertrudis (orchard)' = 'Santa Gertudris (Huerta)'))%>%
mutate(Ranch=recode(Ranch, 'Santa Gertrudis' = 'Santa Gertudris'))%>%
mutate(Ranch=recode(Ranch, 'Palo Verdal' = 'Palo Verdad'))%>%
#combines equivalent variables
mutate(Monitor4=recode(Condition, 'the best' = 'Viva','great' = 'Viva', 'good' = 'Viva', 'fair' = 'Viva', 'poor' = 'Viva',
'dead' = 'Muerta'))%>%
mutate(Condition=recode(Condition, 'the best' = 'great'))%>%
mutate(Height=recode(Height, 'above the knee' = 'above knee',
'above shoulders' = 'above shoulder',
'taller than Daniel' = 'taller than Dana',
'mid hip' = 'hip',
'low hip' = 'below hip'))%>%
mutate(`Canopy cover`=recode(`Canopy cover`, 'patial shade' = 'partial shade',
'mostly  sun' = 'mostly sun',
'total sun' = 'full sun'))%>%
#assigns numeric values to continuous variables
mutate(Condition_num=recode(Condition,
'dead' = '0',
'poor' = '0.25',
'fair' = '0.5',
'good' = '0.75',
'great' = '1'))%>%
mutate(Canopy_num=recode(`Canopy cover`,
'full shade' = '0',
'mostly shade' = '0.25', 'partial sun' = '0.25',
'half shade' = '0.5', 'half sun' = '0.5',
'partial shade' = '0.75', 'mostly sun' = '0.75',
'full sun' = '1'))%>%
mutate(Height_num=recode(Height, #make this Height_cm
'N/A' = '0',
'below ankle' = '5',
'ankle' = '10',
'above ankle' = '23',
'mid shin' = '36',
'below knee' = '43',
'knee' = '51',
'above knee' = '64',
'below hip'= '79',
'hip' = '91',
'above hip' = '102',
'mid torso' = '117',
'below shoulders' = '130',
'shoulder' = '142',
'above shoulder' = '152',
'Dana height' = '165',
'taller than Dana' = '191',
'1.5 Daniels' = '258',
'2 Daniels' = '344'))%>%
#converts variables into numeric so they can do math
mutate(Date = mdy(Date))%>%
mutate(Condition_num=as.numeric(Condition_num))%>%
mutate(Canopy_num=as.numeric(Canopy_num))%>%
mutate(Height_num=as.numeric(Height_num))%>%
#mutate(Monitor4 = replace_na(Monitor4, 'Muerta'))%>% #I think I can remove this line
mutate(`Metal tag ID` = as.character(`Metal tag ID`)) #Some of the tags have an A/B
#Adding relevant data from most recent monitoring (Nov 2024) to the pre-existing data
seedlings_clean_joined <- outplanted_seedlings_nov24%>%
select(Ranch, `Metal tag ID`, Monitor4)%>% #these are the only parts we care about
left_join(seedlings_clean, ., by = 'Metal tag ID')%>%
#Check that the ranch names match in both source databases
#I can remove this section now
mutate(QualityControl = case_when(Ranch.x == Ranch.y~'y',
Ranch.x != Ranch.y~'n'))%>%
#Adding to previous Outcome in seedlings_clean:
mutate(Outcome = case_when((Monitor1 == 'Muerta' | Monitor2 == 'Muerta' | Monitor3 == 'Muerta' | Monitor4 == 'Muerta') ~ 'Dead',
Monitor4 == 'Nueva' | Monitor4 == 'Viva' ~ 'Alive',
is.na(Monitor4) ~ 'Presumed Dead'))%>%
#Adding to previous DateDied in seedlings_clean:
#DateDied is calculated based on last positive observation
mutate(DateDied = case_when((is.na(Monitor1) & is.na(Monitor2) & is.na(Monitor3) & is.na(Monitor4)) | Monitor1 == 'Muerta' ~ DatePlanted,
(Monitor1 == 'Viva' | Monitor1 == 'Nueva') & (Monitor2 == 'Muerta' | is.na(Monitor2)) ~ Monitor1Date,
(Monitor2 == 'Viva' | Monitor2 == 'Nueva') & (Monitor3 == 'Muerta' | is.na(Monitor3)) ~ Monitor2Date,
(Monitor3 == 'Viva' | Monitor3 == 'Nueva') & (Monitor4 == 'Muerta' | is.na(Monitor4)) ~ Monitor3Date))%>%
#If TimeAlive is negative because DatePlanted occurs after DateDied, use DatePlanted; otherwise default to DateDied
mutate(DateDied = case_when(DateDied <= DatePlanted ~ DatePlanted, .default = DateDied))%>%
#mutate(TimeAlive = DateDied - DatePlanted)%>% #I think I can remove this line (repeated below)
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)%>% #days since it was first planted
#TimeAlive is calculated based on outcome and time betweeen DatePlanted &  DateDied
mutate(TimeAlive = case_when(Outcome == 'Alive' ~ (LastObservedDateM4 - DatePlanted),
Outcome == 'Dead' ~ (DateDied - DatePlanted),
Outcome == 'Presumed Dead' ~ (DateDied - DatePlanted)))%>%
mutate(RatioTimeAlive = (as.numeric(TimeAlive)) / (as.numeric(PotentialTimeAlive)))%>%
mutate(LastObservedDateM4 = LastObservedDateM4)
seedlings_clean_joined%>%
filter(!`Metal tag ID` %in% seedlings_clean$`Metal tag ID`)
#find the Metal Tag IDs that were recorded twice
seedlings_clean_joined%>%
group_by(`Metal tag ID`)%>%
summarize(n=n())%>%
filter(n>1)
seedlings_clean%>%
group_by(`Metal tag ID`)%>%
summarize(n=n())%>%
filter(n>1)
#shows all of the information on the two metal tags that have duplicates
temp <- seedlings_clean_joined%>%
filter(`Metal tag ID` %in% c('68', '318'))
####FOR LOOP: SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
max_age <- as.numeric(max(seedlings_clean_joined$TimeAlive, na.rm = TRUE))
df_age <-
data.frame("Days"=seq(0, max_age, 1), "TotalAlive" = NA)
#for loop: how many individuals were still alive at any given duration?
#with Monitor4 added
for (i in 1:nrow(df_age)) {
Day <- df_age$Days[i] #df_age$Days is a vector (one column in this df)
Num_seedlings_alive <- sum(Day <= seedlings_clean_joined$TimeAlive, na.rm = TRUE)
#Day is a temporary object that holds the output of the day we are on in the iterative loop
df_age$TotalAlive[i] <- paste0(Num_seedlings_alive)
#fill one cell per iteration with the total number of seedlings alive by that day
}
#how many seedlings are alive after 1 year?
num_alive_1yr <- seedlings_clean_joined%>%
filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & RatioTimeAlive==1))%>%
nrow()
#how many seedlings are alive after 2 years?
num_alive_2yr <- seedlings_clean_joined%>%
filter((TimeAlive>=730 & PotentialTimeAlive>=730) | (TimeAlive<730 & RatioTimeAlive==1))%>%
nrow()
#perc alive after 1 year
num_alive_1yr/nrow(seedlings_clean_joined)
#perc of inds alive at 1yr that are also alive at 2yr
num_alive_2yr/num_alive_1yr
#plot survivorship curve
df_age_final <- df_age%>%
mutate(TotalAlive = as.numeric(TotalAlive))%>%
mutate(PercentAlive = TotalAlive/max(TotalAlive, na.rm = TRUE))%>%
mutate(data_type = "all")
