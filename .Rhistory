ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop')+
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#888888", "#988999", "#989989"))+
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade", "0.25" = "partial sun", "0.5" = "half sun", "0.75" = "mostly sun", "1" = "full sun"))) + #labels the facets with the names of Canopy classes, rather than the numeric values
scale_x_discrete(labels = c("0" = "Dead", "0.25" = "Poor", "0.5" = "Fine", "0.75" = "Good", "1" = "Great")) + #replaces the numeric labels by writing the Condition classes
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
#ylim(0, 0.6) +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop')+
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#888888", "#555555", "#333333"))+
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade", "0.25" = "partial sun", "0.5" = "half sun", "0.75" = "mostly sun", "1" = "full sun"))) + #labels the facets with the names of Canopy classes, rather than the numeric values
scale_x_discrete(labels = c("0" = "Dead", "0.25" = "Poor", "0.5" = "Fine", "0.75" = "Good", "1" = "Great")) + #replaces the numeric labels by writing the Condition classes
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
#ylim(0, 0.6) +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop')+
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#777777", "#555555", "#333333"))+
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade", "0.25" = "partial sun", "0.5" = "half sun", "0.75" = "mostly sun", "1" = "full sun"))) + #labels the facets with the names of Canopy classes, rather than the numeric values
scale_x_discrete(labels = c("0" = "Dead", "0.25" = "Poor", "0.5" = "Fine", "0.75" = "Good", "1" = "Great")) + #replaces the numeric labels by writing the Condition classes
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
#ylim(0, 0.6) +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
labs(0 = 'dead') +
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
#ylim(0, 0.6) +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop')+
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#777777", "#555555", "#333333"), labels=c(0 = 'dead', 0.25 = 'poor', 0.5 = 'fine', 0.75 = 'good', 1 = 'great'))+
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
#ylim(0, 0.6) +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop')+
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#777777", "#555555", "#333333"), labels=c('dead', 'poor', 'fine','good', 'great'))+
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade", "0.25" = "partial sun", "0.5" = "half sun", "0.75" = "mostly sun", "1" = "full sun"))) + #labels the facets with the names of Canopy classes, rather than the numeric values
scale_x_discrete(labels = c("0" = "Dead", "0.25" = "Poor", "0.5" = "Fine", "0.75" = "Good", "1" = "Great")) + #replaces the numeric labels by writing the Condition classes
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop') +
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#777777", "#555555", "#333333"),
labels=c('dead', 'poor', 'fine','good', 'great'),
(name = "Condition"))+
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade", "0.25" = "partial sun", "0.5" = "half sun", "0.75" = "mostly sun", "1" = "full sun"))) + #labels the facets with the names of Canopy classes, rather than the numeric values
scale_x_discrete(labels = c("0" = "Dead", "0.25" = "Poor", "0.5" = "Fine", "0.75" = "Good", "1" = "Great")) + #replaces the numeric labels by writing the Condition classes
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop') +
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#777777", "#555555", "#333333"),
labels=c('dead', 'poor', 'fine','good', 'great'),
(name = "Condition"))+
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade", "0.25" = "partial sun", "0.5" = "half sun", "0.75" = "mostly sun", "1" = "full sun"))) + #labels the facets with the names of Canopy classes, rather than the numeric values
#scale_x_discrete(labels = c("0" = "Dead", "0.25" = "Poor", "0.5" = "Fine", "0.75" = "Good", "1" = "Great")) + #replaces the numeric labels by writing the Condition classes
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#Freq. of condition, faceted by canopy
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop') +
scale_fill_manual(values=c("#dddddd", "#aaaaaa", "#777777", "#555555", "#333333"),
labels=c('dead', 'poor', 'fine','good', 'great'),
(name = "Condition"))+
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade", "0.25" = "partial sun", "0.5" = "half sun", "0.75" = "mostly sun", "1" = "full sun"))) + #labels the facets with the names of Canopy classes, rather than the numeric values
scale_x_discrete(labels = c("0" = "Dead", "0.25" = "Poor", "0.5" = "Fine", "0.75" = "Good", "1" = "Great")) + #replaces the numeric labels by writing the Condition classes
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
View(seedlings_clean_joined)
seedlinsg_clean_joined%>%
filter(Outcome == 'Alive')
seedlings_clean_joined%>%
filter(Outcome == 'Alive')
show_ages <- seedlings_clean_joined%>%
filter(Outcome == 'Alive')
View(show_ages)
#Survivorship curve (marked at 1 yr and 2 yrs)
df_age_final%>%
ggplot() +
geom_step(aes(x = Days, y = TotalAlive)) +
xlab('Days') +
ylab('# of live individuals') +
scale_x_continuous(name = 'time',
breaks = c(0, 182.5, 365, 547.5, 730, 912.5, 1095), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr', '1.5yrs','2yrs', '2.5yrs', '3yrs')) +
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
#geom_text(label="1 year", x=365-70, y=1500) +
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
#geom_text(label="2 years", x=(365*2)-75, y=1500) +
ggtitle("# of seedlings alive over time") +
theme_classic()
#Survivorship curve (marked at 1 yr and 2 yrs)
df_age_final%>%
ggplot() +
geom_step(aes(x = Days, y = TotalAlive)) +
xlab('Days') +
ylab('# of live individuals') +
scale_x_continuous(name = 'time',
breaks = c(0, 182.5, 365, 547.5, 730), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr', '1.5yrs','2yrs')) +
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
#geom_text(label="1 year", x=365-70, y=1500) +
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
#geom_text(label="2 years", x=(365*2)-75, y=1500) +
ggtitle("# of seedlings alive over time") +
theme_classic()
#Survivorship curve (marked at 1 yr and 2 yrs)
df_age_final%>%
ggplot() +
geom_step(aes(x = Days, y = TotalAlive)) +
xlab('Days') +
ylab('# of live individuals') +
scale_x_continuous(name = 'time',
breaks = c(0, 182.5, 365, 547.5, 730), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr', '1.5yrs','2yrs'),
limits = c(0,730)) +
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
#geom_text(label="1 year", x=365-70, y=1500) +
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
#geom_text(label="2 years", x=(365*2)-75, y=1500) +
ggtitle("# of seedlings alive over time") +
theme_classic()
View(df_age_final)
#Survivorship curve (marked at 1 yr and 2 yrs)
df_age_final%>%
ggplot() +
geom_step(aes(x = Days, y = TotalAlive)) +
xlab('Days') +
ylab('# of live individuals') +
scale_x_continuous(name = 'time',
breaks = c(0, 182.5, 365, 547.5, 730, 912.5, 1095), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr', '1.5yrs','2yrs', '2.5yrs', '3yrs')) +
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
#geom_text(label="1 year", x=365-70, y=1500) +
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
#geom_text(label="2 years", x=(365*2)-75, y=1500) +
ggtitle("# of seedlings alive over time") +
theme_classic()
#Survivorship curve (marked at 1 yr and 2 yrs)
df_age_final%>%
ggplot() +
geom_step(aes(x = Days, y = TotalAlive)) +
xlab('Days') +
ylab('# of live individuals') +
scale_x_continuous(name = 'time',
breaks = c(0, 182.5, 365, 547.5, 730, 912.5, 1095), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr', '1.5yrs','2yrs', '2.5yrs', '3yrs')) +
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
#geom_text(label="1 year", x=365-70, y=1500) +
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
#geom_text(label="2 years", x=(365*2)-75, y=1500) +
ggtitle("# of seedlings alive over time") +
theme_classic()
#Survivorship curve (marked at 1 yr and 2 yrs)
df_age_final%>%
ggplot() +
geom_step(aes(x = Days, y = TotalAlive)) +
xlab('Days') +
ylab('# of live individuals') +
scale_x_continuous(name = 'time',
breaks = c(0, 182.5, 365, 547.5, 730, 912.5, 1095), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr', '1.5yrs','2yrs', '2.5yrs', '3yrs')) +
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
#geom_text(label="1 year", x=365-70, y=1500) +
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
#geom_text(label="2 years", x=(365*2)-75, y=1500) +
ggtitle("# of seedlings alive over time") +
theme_classic()
#Survivorship curve (marked at 1 yr and 2 yrs)
df_age_final%>%
ggplot() +
geom_step(aes(x = Days, y = TotalAlive)) +
xlab('Days') +
ylab('# of live individuals') +
scale_x_continuous(name = 'time',
breaks = c(0, 182.5, 365, 547.5, 730, 912.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr', '1.5yrs','2yrs', '2.5yrs')) +
geom_vline(xintercept = 365, linetype="dashed", color='red') +  #marks 1 year
#geom_text(label="1 year", x=365-70, y=1500) +
geom_vline(xintercept = (365*2), linetype="dashed", color='red') + #marks 2 years
#geom_text(label="2 years", x=(365*2)-75, y=1500) +
ggtitle("# of seedlings alive over time") +
theme_classic()
#How many seedlings that are still alive are less than 1 year old?
seedlings_clean_joined%>%
filter(Outcome == 'Alive')%>%
filter(TimeAlive == (365))%>%
nrow()
#How many seedlings that are still alive are less than 1 year old?
seedlings_clean_joined%>%
filter(Outcome == 'Alive')%>%
filter(TimeAlive < (365))%>%
nrow()
#How many seedlings that are still alive are less than 2 years old?
seedlings_clean_joined%>%
filter(Outcome == 'Alive')%>%
filter(TimeAlive < (365*2))%>%
nrow()
View(outplanted_seedlings_nov24)
View(seedlings_clean_joined)
"%notin%"<-Negate("%in%")
####FOR LOOP: SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
#seedlings_clean_joined, with MetalTagID & TimeAlive
outplanted_seedlings_nov24%>%
filter(MetalTagID %notin% seedlings_clean_joined$MetalTagID)
####FOR LOOP: SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
#seedlings_clean_joined, with MetalTagID & TimeAlive
notin <- outplanted_seedlings_nov24%>%
filter(MetalTagID %notin% seedlings_clean_joined$MetalTagID)
View(notin)
notin <- outplanted_seedlings_nov24%>%
filter(MetalTagID %notin% seedlings_clean_joined$MetalTagID)%>%
filter(!is.na(TimeAlive))
####FOR LOOP: SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
#not represented in Daniel's dataset, but that we found and can encorporate into survivorship curve
nov24_notindaniel <- outplanted_seedlings_nov24%>%
filter(MetalTagID %notin% seedlings_clean_joined$MetalTagID)%>%
filter(!is.na(TimeAlive))
input_for_df_age <- seedlings_clean_joined%>%
select(TimeAlive)%>%
rbind(nov24_notindaniel$TimeAlive)
input_for_df_age <- seedlings_clean_joined%>%
dplyr::select(TimeAlive)%>%
rbind(nov24_notindaniel$TimeAlive)
dplyr::select(TimeAlive)%>%
()
seedlings_clean_joined%>%
dplyr::select(TimeAlive)
nov24_notindaniel$TimeAlive
####FOR LOOP: SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
#not represented in Daniel's dataset, but that we found and can encorporate into survivorship curve
nov24_notindaniel <- outplanted_seedlings_nov24%>%
filter(MetalTagID %notin% seedlings_clean_joined$MetalTagID)%>%
filter(!is.na(TimeAlive))%>%
dplyr::select(TimeAlive)
input_for_df_age <- seedlings_clean_joined%>%
dplyr::select(TimeAlive)%>%
rbind(nov24_notindaniel)
View(input_for_df_age)
max_age <- as.numeric(max(input_for_df_age$TimeAlive, na.rm = TRUE))
df_age <-
data.frame("Days"=seq(0, max_age, 1), "TotalAlive" = NA)
#for loop: how many individuals were still alive at any given duration?
#with Monitor4 added
for (i in 1:nrow(df_age)) {
Day <- df_age$Days[i] #df_age$Days is a vector (one column in this df)
Num_seedlings_alive <- sum(Day <= input_for_df_age$TimeAlive, na.rm = TRUE)
#Day is a temporary object that holds the output of the day we are on in the iterative loop
df_age$TotalAlive[i] <- paste0(Num_seedlings_alive)
#fill one cell per iteration with the total number of seedlings alive by that day
}
#how many seedlings are alive after 1 year?
num_alive_1yr <- input_for_df_age%>%
filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & RatioTimeAlive==1))%>%
nrow()
#how many seedlings are alive after 1 year?
num_alive_1yr <- input_for_df_age%>%
dplyr::filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & RatioTimeAlive==1))%>%
nrow()
max_age <- as.numeric(max(input_for_df_age$TimeAlive, na.rm = TRUE))
df_age <-
data.frame("Days"=seq(0, max_age, 1), "TotalAlive" = NA)
#for loop: how many individuals were still alive at any given duration?
#with Monitor4 added
for (i in 1:nrow(df_age)) {
Day <- df_age$Days[i] #df_age$Days is a vector (one column in this df)
Num_seedlings_alive <- sum(Day <= input_for_df_age$TimeAlive, na.rm = TRUE)
#Day is a temporary object that holds the output of the day we are on in the iterative loop
df_age$TotalAlive[i] <- paste0(Num_seedlings_alive)
#fill one cell per iteration with the total number of seedlings alive by that day
}
#how many seedlings are alive after 1 year?
num_alive_1yr <- input_for_df_age%>%
filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & RatioTimeAlive==1))%>%
nrow()
View(outplanted_seedlings_nov24)
#Takes data collected in the field in Nov 2024 and recodes some columns that have irregular (shade, height, etc)
outplanted_seedlings_nov24 <- outplanted_seedlings24.field%>%
#interprets dead individuals with a Height of N/A as a Height_cm of 0
mutate(Height_cm=recode(Height,'N/A' = '0'))%>%
#renames columns to match previous data
mutate(Ranch=recode(Ranch,
'San Dio' = 'Rancho San Dionisio',
'Santo Do' = 'Santo Domingo',
'La Palapa' = 'La Rueda (Palapa)',
'Parque de Santiago' = 'Parque Ecológico Santiago',
'Santa Gertrudis (orchard)' = 'Santa Gertudris (Huerta)',
'Santa Gertrudis' = 'Santa Gertudris',
'Palo Verdal' = 'Palo Verdad'))%>%
#combines equivalent variables
mutate(Monitor4=recode(Condition, 'the best' = 'Viva','great' = 'Viva', 'good' = 'Viva', 'fair' = 'Viva', 'poor' = 'Viva',
'dead' = 'Muerta'))%>%
mutate(Condition=recode(Condition, 'the best' = 'great'))%>%
mutate(Height=recode(Height, 'above the knee' = 'above knee',
'above shoulders' = 'above shoulder',
'taller than Daniel' = 'taller than Dana',
'1.5 Daniels' = 'taller than Dana',
'2 Daniels' = 'taller than Dana',
'mid hip' = 'hip',
'low hip' = 'below hip'))%>%
mutate(Canopy_cover=recode(`Canopy cover`, 'patial shade' = 'partial shade',
'mostly  sun' = 'mostly sun',
'total sun' = 'full sun'))%>%
#assigns numeric values to continuous variables
mutate(Condition_num=as.factor(recode(Condition,
'dead' = '0',
'poor' = '0.25',
'fair' = '0.5',
'good' = '0.75',
'great' = '1')))%>%
mutate(Canopy_num=recode(Canopy_cover,
'full shade' = '0',
'mostly shade' = '0.25', 'partial sun' = '0.25',
'half shade' = '0.5', 'half sun' = '0.5',
'partial shade' = '0.75', 'mostly sun' = '0.75',
'full sun' = '1'))%>%
mutate(Height_cm=recode(Height,
'N/A' = '0',
'below ankle' = '0-7.5',
'ankle' = '7.5-16.5',
'above ankle' = '16.5-29.5',
'mid shin' = '29.5-39.5',
'below knee' = '39.5-47',
'knee' = '47-57.5',
'above knee' = '57.5-71.5',
'below hip'= '71.5-85',
'hip' = '85-96.5',
'above hip' = '96.5-109.5',
'mid torso' = '109.5-123.5',
'below shoulders' = '123.5-136',
'shoulder' = '136-147',
'above shoulder' = '147-158.5',
'Dana height' = '158.5-171.5',
'taller than Dana' = '>171.5'
))%>%
mutate(Height_lower=recode(Height,
'N/A' = '0',
'below ankle' = '0',
'ankle' = '7.5',
'above ankle' = '16.5',
'mid shin' = '29.5',
'below knee' = '39.5',
'knee' = '47',
'above knee' = '57.5',
'below hip'= '71.5',
'hip' = '85',
'above hip' = '96.5',
'mid torso' = '109.5',
'below shoulders' = '123.5',
'shoulder' = '136',
'above shoulder' = '147',
'Dana height' = '158.5',
'taller than Dana' = '171.5'))%>%
mutate(Height_upper=recode(Height,
'N/A' = '0',
'below ankle' = '7.5',
'ankle' = '16.5',
'above ankle' = '29.5',
'mid shin' = '39.5',
'below knee' = '47',
'knee' = '57.5',
'above knee' = '71.5',
'below hip'= '85',
'hip' = '96.5',
'above hip' = '109.5',
'mid torso' = '123.5',
'below shoulders' = '136',
'shoulder' = '147',
'above shoulder' = '158.5',
'Dana height' = '171.5',
'taller than Dana' = '343'
))%>%
#converts variables into numeric so they can do math
mutate(Canopy_num=as.factor(Canopy_num))%>%
mutate(Height_cm=as.factor(Height_cm))%>%
mutate(MetalTagID = `Metal tag ID`)%>%
mutate(MetalTagID = as.character(MetalTagID)) #Some of the tags have an A/B
#adds TimeAlive info to our outplanted individuals from Daniel's database
outplanted_seedlings_nov24 <- outplanted_seedlings_nov24%>%
left_join(., dplyr::select(seedlings_clean_joined, c('MetalTagID', 'TimeAlive')), by = 'MetalTagID')%>%
rename('Notes' = 'Notes/comments')%>% #below is to add TimeAlive to individuals missing TimeAlive
mutate(DatePlanted = case_when(
str_detect(Notes, 'festival') ~ '08/12/2023',
str_detect(Ranch, 'San Dio') ~ '01/09/2023'))%>%#We don't know the exact date in September they were planted, so we are using Sept 1st
mutate(TimeAlive = case_when(
!is.na(DatePlanted) ~ LastObservedDateM4 - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive))%>%
mutate(TimeAliveNum = as.numeric(TimeAlive))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - DatePlanted)
#adds TimeAlive info to our outplanted individuals from Daniel's database
outplanted_seedlings_nov24 <- outplanted_seedlings_nov24%>%
left_join(., dplyr::select(seedlings_clean_joined, c('MetalTagID', 'TimeAlive')), by = 'MetalTagID')%>%
rename('Notes' = 'Notes/comments')%>% #below is to add TimeAlive to individuals missing TimeAlive
mutate(DatePlanted = case_when(
str_detect(Notes, 'festival') ~ '08/12/2023',
str_detect(Ranch, 'San Dio') ~ '01/09/2023'))%>%#We don't know the exact date in September they were planted, so we are using Sept 1st
mutate(TimeAlive = case_when(
!is.na(DatePlanted) ~ LastObservedDateM4 - dmy(DatePlanted),
is.na(DatePlanted) ~ TimeAlive))%>%
mutate(TimeAliveNum = as.numeric(TimeAlive))%>%
mutate(PotentialTimeAlive = LastObservedDateM4 - dmy(DatePlanted))
####FOR LOOP: SURVIVORSHIP CURVE####
#creating a df with increments of 1 day to represent how old a seedling could be
#not represented in Daniel's dataset, but that we found and can encorporate into survivorship curve
nov24_notindaniel <- outplanted_seedlings_nov24%>%
filter(MetalTagID %notin% seedlings_clean_joined$MetalTagID)%>%
filter(!is.na(TimeAlive))%>%
dplyr::select(c(TimeAlive, PotentialTimeAlive))
input_for_df_age <- seedlings_clean_joined%>%
dplyr::select(c(TimeAlive, PotentialTimeAlive))%>%
rbind(nov24_notindaniel)
View(input_for_df_age)
max_age <- as.numeric(max(input_for_df_age$TimeAlive, na.rm = TRUE))
df_age <-
data.frame("Days"=seq(0, max_age, 1), "TotalAlive" = NA)
#for loop: how many individuals were still alive at any given duration?
#with Monitor4 added
for (i in 1:nrow(df_age)) {
Day <- df_age$Days[i] #df_age$Days is a vector (one column in this df)
Num_seedlings_alive <- sum(Day <= input_for_df_age$TimeAlive, na.rm = TRUE)
#Day is a temporary object that holds the output of the day we are on in the iterative loop
df_age$TotalAlive[i] <- paste0(Num_seedlings_alive)
#fill one cell per iteration with the total number of seedlings alive by that day
}
#how many seedlings are alive after 1 year?
num_alive_1yr <- input_for_df_age%>%
filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & RatioTimeAlive==1))%>%
nrow()
#how many seedlings are alive after 1 year?
num_alive_1yr <- input_for_df_age%>%
filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & RatioTimeAlive==TimeAlive))%>%
nrow()
#how many seedlings are alive after 1 year?
num_alive_1yr <- input_for_df_age%>%
filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & PotentialTimeAlive==TimeAlive))%>%
nrow()
#how many seedlings are alive after 1 year?
num_alive_1yr <- input_for_df_age%>%
filter((TimeAlive>=365 & PotentialTimeAlive>=365) | (TimeAlive<365 & PotentialTimeAlive==TimeAlive))%>%
nrow()
#how many seedlings are alive after 2 years?
num_alive_2yr <- input_for_df_age%>%
filter((TimeAlive>=730 & PotentialTimeAlive>=730) | (TimeAlive<730 & PotentialTimeAlive==TimeAlive))%>%
nrow()
#perc alive after 1 year
num_alive_1yr/nrow(input_for_df_age)
#perc of inds alive at 1yr that are also alive at 2yr
num_alive_2yr/num_alive_1yr
