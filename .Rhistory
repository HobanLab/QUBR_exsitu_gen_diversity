#How many inds die immediately?
waterfall_plot_df%>%
filter(TimeAlive_conservative == 0)%>%
nrow()
#How many inds does the leave to continue on?
waterfall_plot_df%>%
filter(TimeAlive_conservative > 0)%>%
nrow()
#How many inds are alive at 1 yr?
waterfall_plot_df%>%
filter(TimeAlive_conservative >= (365))%>%
nrow()
#LIBERAL
waterfall_plot_df_liberal<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_liberal))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_liberal + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_liberal_dead <- waterfall_plot_df_liberal%>%
filter(Condition == "Dead")
waterfall_plot_df_liberal%>%
ggplot(aes(x = TimeAlive_liberal)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_liberal_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Liberal') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5, 1095, 1277.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs', '3yrs', '3.5yrs')) +
geom_vline(xintercept = c(0, 365, (365*2), (365*3)), linetype="dashed", color='red') +
theme_classic()
#LIBERAL
waterfall_plot_df_liberal<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_liberal == PotentialTimeAlive ~ "Alive",
TimeAlive_liberal != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_liberal))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_liberal + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_liberal_dead <- waterfall_plot_df_liberal%>%
filter(Condition == "Dead")
waterfall_plot_df_liberal%>%
ggplot(aes(x = TimeAlive_liberal)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_liberal_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Liberal') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5, 1095, 1277.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs', '3yrs', '3.5yrs')) +
geom_vline(xintercept = c(0, 365, (365*2), (365*3)), linetype="dashed", color='red') +
theme_classic()
#LIBERAL
waterfall_plot_df_liberal<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_liberal))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_liberal + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_liberal_dead <- waterfall_plot_df_liberal%>%
filter(Condition == "Dead")
waterfall_plot_df_liberal%>%
ggplot(aes(x = TimeAlive_liberal)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_liberal_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Liberal') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5, 1095, 1277.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs', '3yrs', '3.5yrs')) +
geom_vline(xintercept = c(0, 365, (365*2), (365*3)), linetype="dashed", color='red') +
theme_classic()
#MED
waterfall_plot_df_med<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_conservative == PotentialTimeAlive ~ "Alive",
TimeAlive_conservative != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_med))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_med + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_med value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_med_dead <- waterfall_plot_df_med%>%
filter(Condition == "Dead")
waterfall_plot_df_med%>%
ggplot(aes(x = TimeAlive_med)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_med_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Med') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5, 1095, 1227.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs', '3yrs', '3.5yrs')) +
geom_vline(xintercept = c(0, 365, (365*2), (365*3)), linetype="dashed", color='red') +
theme_classic()
#MED
waterfall_plot_df_med<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_med == PotentialTimeAlive ~ "Alive",
TimeAlive_med != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_med))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_med + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_med value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_med_dead <- waterfall_plot_df_med%>%
filter(Condition == "Dead")
waterfall_plot_df_med%>%
ggplot(aes(x = TimeAlive_med)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_med_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Med') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5, 1095, 1227.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs', '3yrs', '3.5yrs')) +
geom_vline(xintercept = c(0, 365, (365*2), (365*3)), linetype="dashed", color='red') +
theme_classic()
#LIBERAL
waterfall_plot_df_liberal<- input_for_df_age %>%
mutate_all(~ as.numeric(.)) %>%
mutate(Condition = as.factor(case_when(TimeAlive_liberal == PotentialTimeAlive ~ "Alive",
TimeAlive_liberal != PotentialTimeAlive ~ "Dead"))) %>% #Add condition back in since I need it to color the lines to differentiate between things which died and things which are still alive
mutate(rank = row_number(desc(TimeAlive_liberal))) %>% #Making a column with a ranked value for each individual so I can offset each individual by a small amount on my yaxis AND have the individuals appear in order by longest time alive at the top of the graph
mutate(yval = 19.5 - rank*.0075) %>% #setting the value for the horizontal line for each individual, with a max value of 19.5 and then descending by rank
rowwise() %>% #I don't know why I need this but without it the uniform distribution call below outputs the same value for every row
mutate(xval = TimeAlive_liberal + runif(1, min = -5, max = 5)) #setting the value for the vertical line for each individual by jittering a small amount from the real TimeAlive_conservative value (via sampling from a uniform distribution)
#Making a df with just dead individuals so that I can not plot vertical lines for the individuals that are still alive
waterfall_plot_df_liberal_dead <- waterfall_plot_df_liberal%>%
filter(Condition == "Dead")
waterfall_plot_df_liberal%>%
ggplot(aes(x = TimeAlive_liberal)) +
geom_segment(aes(x = 0, xend = xval, y=yval, yend=yval, color = Condition), linewidth = .25, alpha = .5) + #Makes the horizontal line for each individual
geom_segment(data = waterfall_plot_df_liberal_dead, aes(x = xval, xend = xval, y=yval, yend=.5, color = Condition), alpha = .25) + #Makes the vertical (death) line for each individual
scale_color_manual(values = c("darkgreen", "gray")) + #sets the colors for the lines based on the Condition with living inds being green
ylab("") +
ggtitle('Survivorship: Liberal') +
scale_y_continuous(breaks = c(2.5, 16), #adds tick only for Dead and Alive
labels = c('Dead', 'Alive'),
limits = c(0,20)) + #set y lim
scale_x_continuous(name = 'Time since outplanting',
breaks = c(0, 182.5, 365,
547.5, 730, 912.5, 1095, 1277.5), #adds tick marks at 6 month intervals
labels = c('0', '0.5yr', '1yr',
'1.5yrs','2yrs', '2.5yrs', '3yrs', '3.5yrs')) +
geom_vline(xintercept = c(0, 365, (365*2), (365*3)), linetype="dashed", color='red') +
theme_classic()
#How many inds do we start with?
waterfall_plot_df%>%
filter(TimeAlive_conservative >= 0)%>%
nrow()
#How many inds die immediately?
waterfall_plot_df%>%
filter(TimeAlive_conservative == 0)%>%
nrow()
#How many inds do we start with?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow()
#How many inds do we start with?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow()
#How many inds do we start with?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow()
#How many inds die immediately?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative == 0)%>%
nrow()
#How many inds does the leave to continue on?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative > 0)%>%
nrow()
#How many inds are alive at 1 yr?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= (365))%>%
nrow()
#How many could have lived to 1yr?
waterfall_plot_df_conservative%>%
filter(PotentialTimeAlive >= (365))%>%
nrow()
#How many inds are alive at 2 yrs?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= (365*2))%>%
nrow()
#How many could have lived to 2yr?
waterfall_plot_df_conservative%>%
filter(PotentialTimeAlive >= (365*2))%>%
nrow()
#How many inds do we start with?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow()
#How many inds die immediately?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative == 0)%>%
nrow()
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow()
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
print(inds_start)
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
print(nrow())
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow()
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)
print(inds_start)
nrow(inds_start)
#How many inds die immediately?
inds_die_immediate <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative == 0)
nrow(inds_die_immediate)
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow(inds_start)
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
print(nrow(inds_start))
#How many inds die immediately?
inds_die_immediate <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative == 0)
nrow(inds_die_immediate)
#How many inds does the leave to continue on?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative > 0)%>%
nrow()
#How many inds are alive at 1 yr?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= (365))%>%
nrow()
#How many could have lived to 1yr?
waterfall_plot_df_conservative%>%
filter(PotentialTimeAlive >= (365))%>%
nrow()
#How many inds are alive at 2 yrs?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= (365*2))%>%
nrow()
#How many could have lived to 2yr?
waterfall_plot_df_conservative%>%
filter(PotentialTimeAlive >= (365*2))%>%
nrow()
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)%>%
nrow(inds_start)
#How many inds do we start with?
inds_start <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= 0)
nrow(inds_start)
#How many inds die immediately?
inds_die_immediate <- waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative == 0)
nrow(inds_die_immediate)
nrow(inds_die_immediate)/nrow(inds_start)
nrow(inds_die_immediate)/nrow(inds_start)*100
#How many inds does the leave to continue on?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative > 0)%>%
nrow()
#How many inds are alive at 1 yr?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= (365))%>%
nrow()
#How many could have lived to 2yr?
waterfall_plot_df_conservative%>%
filter(PotentialTimeAlive >= (365*2))%>%
nrow()
#How many inds are alive at 2 yrs?
waterfall_plot_df_conservative%>%
filter(TimeAlive_conservative >= (365*2))%>%
nrow()
#RANCH VS CONDITION
#calculating sample size for each Ranch
Ranch_summary_condition <- outplanted_seedlings_nov24_aov %>%
group_by(Ranch) %>%
summarise(samp = n())
Ranch_summary_condition
outplanted_seedlings_nov24_aov%>%
ggplot() +
ggtitle("Condition of seedlings by ranch") +
#geom_bar(aes(x = Condition_num, y=..prop.., fill = Region), stat = 'prop') +
geom_bar(aes(x = Condition_num, fill = Region)) +
#facet_wrap(~Ranch) + #without sample size
facet_wrap(~Ranch,
labeller = labeller(Ranch = c(
"El Ancón" = "El Ancón \n (n=9)",
"La Rueda" = "La Rueda \n (n=4)",
"La Semilla" = "La Semilla \n (n=3)",
"Palo Verdad" = "Palo Verdad \n (n=6)",
"Parque Ecológico Santiago" = "Parque Ecológico Santiago \n (n=17)",
"Rancho San Dionisio" = "Rancho San Dionisio \n (n=92)",
"Santa Gertudris" = "Santa Gertudris \n (n=5)",
"Santa Gertudris (Huerta)" = "Santa Gertudris (Huerta) \n (n=12)",
"Santo Domingo" = "Santo Domingo \n (n=2)"))) + #with sample size
scale_fill_manual(values = c("N" = "#558b2f",
"E" = "#e65100",
"W" = "#0288d1")) + #uses standard colors for regions
xlab("Condition") +
ylab("# of individuals") +
#ylab("proportion of individuals") +
scale_x_discrete(labels = c("0" = "Dead", #replaces numeric labels with condition classes
"0.25" = "Poor",
"0.5" = "Fine",
"0.75" = "Good",
"1" = "Great")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) #adjusts x axis labels for readability
#stacked bar charts- Region
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x = Canopy_num, fill = Region), position = 'fill') +
ggtitle('# of individuals in each canopy class \n displayed by Region') +
xlab('Canopy class') +
scale_x_discrete(labels = c("0" = "Full shade",
"0.25" = "Mostly shade",
"0.5" = "Partial sun",
"0.75" = "Mostly sun",
"1" = "Full sun")) +
ylab('proportion of individuals') +
theme_classic()
#RANCH VS CONDITION
#calculating sample size for each Ranch
Ranch_summary_condition <- outplanted_seedlings_nov24_aov %>%
group_by(Ranch) %>%
summarise(samp = n())
Ranch_summary_condition
outplanted_seedlings_nov24_aov%>%
ggplot() +
ggtitle("Condition of seedlings by ranch") +
#geom_bar(aes(x = Condition_num, y=..prop.., fill = Region), stat = 'prop') +
geom_bar(aes(x = Condition_num, fill = Region)) +
#facet_wrap(~Ranch) + #without sample size
facet_wrap(~Ranch,
labeller = labeller(Ranch = c(
"El Ancón" = "El Ancón \n (n=9)",
"La Rueda" = "La Rueda \n (n=4)",
"La Semilla" = "La Semilla \n (n=3)",
"Palo Verdad" = "Palo Verdad \n (n=6)",
"Parque Ecológico Santiago" = "Parque Ecológico Santiago \n (n=17)",
"Rancho San Dionisio" = "Rancho San Dionisio \n (n=92)",
"Santa Gertudris" = "Santa Gertudris \n (n=5)",
"Santa Gertudris (Huerta)" = "Santa Gertudris (Huerta) \n (n=12)",
"Santo Domingo" = "Santo Domingo \n (n=2)"))) + #with sample size
scale_fill_manual(values = c("N" = "#558b2f",
"E" = "#e65100",
"W" = "#0288d1")) + #uses standard colors for regions
xlab("Condition") +
ylab("# of individuals") +
#ylab("proportion of individuals") +
scale_x_discrete(labels = c("0" = "Dead", #replaces numeric labels with condition classes
"0.25" = "Poor",
"0.5" = "Fine",
"0.75" = "Good",
"1" = "Great")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) #adjusts x axis labels for readability
#CONDITION FREQ, FACET BY CANOPY
#calculates sample size for each Canopy class
Canopy_summary <- outplanted_seedlings_nov24_aov %>%
group_by(Canopy_num) %>%
summarise(samp = n())
#also calculate sample size for each Condition class but I don't think that we need this
Condition_summary <- outplanted_seedlings_nov24_aov %>%
group_by(Condition_num) %>%
summarise(samp = n())
#displays samples sizes
Canopy_summary
Condition_summary
outplanted_seedlings_nov24_aov%>%
filter(!is.na(Canopy_num))%>% #removes any individuals missing Canopy data
mutate(Canopy_num = as.factor(as.character(Canopy_num)))%>%
ggplot() +
ggtitle('Condition of seedlings by canopy cover') +
xlab('Seedling Condition') +
ylab('Proportion of individuals \n within canopy class') +
geom_bar(aes(x=Condition_num, y=..prop.., fill=Condition_num), stat = 'prop') + #stat = 'prop' creates the proportion of individuals rather than the # of individuals
scale_fill_manual(values=c("#dddddd",
"#aaaaaa",
"#777777",
"#555555",
"#333333"),
labels=c('dead (n=6)',
'poor (n=38)',
'fine (n=50)',
'good (n=39)',
'great (n=17)'),
(name = "Condition"))+ #adds shading to Condition classes and creates legend
facet_grid(~Canopy_num, labeller = labeller(Canopy_num = c(
"0" = "full shade \n (n=9)",
"0.25" = "partial sun \n (n=34)",
"0.5" = "half sun \n (n=36)",
"0.75" = "mostly sun \n (n=46)",
"1" = "full sun \n (n=22)"))) + #labels the facets with the names of Canopy classes and their sample sizes
scale_x_discrete(labels = c("0" = "Dead",
"0.25" = "Poor",
"0.5" = "Fine",
"0.75" = "Good",
"1" = "Great")) + #replaces the numeric labels on x axis with Condition class
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
#stacked bar charts- Region
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x = Canopy_num, fill = Region), position = 'fill') +
ggtitle('# of individuals in each canopy class \n displayed by Region') +
xlab('Canopy class') +
scale_x_discrete(labels = c("0" = "Full shade",
"0.25" = "Mostly shade",
"0.5" = "Partial sun",
"0.75" = "Mostly sun",
"1" = "Full sun")) +
ylab('proportion of individuals') +
theme_classic()
#stacked bar charts- Region & Canopy
outplanted_seedlings_nov24$Ranch <- as.factor(outplanted_seedlings_nov24$Ranch)
outplanted_seedlings_nov24$Region <- as.factor(outplanted_seedlings_nov24$Region)
levels(outplanted_seedlings_nov24$Region)
outplanted_seedlings_nov24$Region <- relevel(outplanted_seedlings_nov24$Region, ref = "E")
summary(outplanted_seedlings_nov24)
#Unique colors for each Ranch- Region & Canopy
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x= Canopy_num, fill = Ranch), position = 'fill') +
ggtitle('# of individuals per Canopy class, \n divided by Ranch') +
scale_fill_manual(values=c("#00BA38", #El Ancon
"#494cb0", #La Rueda
"#124cd0", #La Rueda Palapa
"#F8766D", #Palo Verdad
"#F95146", #Parque Ecologico Santiago
"#F9a09a", #Rancho San Dioniso
"#619CFF",#Santa Gertrudis
"#Afcaf8",#Santa Gertrudis (Huerta)
"#114cb0"))+#Santo Domingo
ylab('proportion of individuals') +
xlab('Canopy class') +
scale_x_discrete(labels = c("0" = "Full shade",
"0.25" = "Mostly shade",
"0.5" = "Partial sun",
"0.75" = "Mostly sun",
"1" = "Full sun")) +
theme_classic()
#stacked bar chart- Region & Condition
outplanted_seedlings_nov24%>%
filter(!is.na(Canopy_num))%>%
ggplot +
geom_bar(aes(x = Condition_num, fill = Region), position = 'fill') +
ggtitle('Region of individuals in each condition class') +
ylab('Proportion of individuals') +
xlab('Seedling condition') +
scale_x_discrete(labels = c("0" = "Dead",
"0.25" = "Poor",
"0.5" = "Fine",
"0.75" = "Good",
"1" = "Great")) +
theme_classic()
